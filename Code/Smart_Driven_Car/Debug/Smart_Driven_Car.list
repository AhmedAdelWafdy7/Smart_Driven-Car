
Smart_Driven_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a10  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000b40  08000b40  00010b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b58  08000b58  00010b60  2**0
                  CONTENTS
  4 .ARM          00000000  08000b58  08000b58  00010b60  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b58  08000b60  00010b60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b58  08000b58  00010b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b5c  08000b5c  00010b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000b60  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000b60  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b60  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011b9  00000000  00000000  00010b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000062e  00000000  00000000  00011d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00012370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  00012518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002492  00000000  00000000  00012668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002316  00000000  00000000  00014afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000086d9  00000000  00000000  00016e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001f4e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004f4  00000000  00000000  0001f53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b28 	.word	0x08000b28

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000b28 	.word	0x08000b28

08000170 <wait_ms>:
 *      Author: Ahmed Adel Wafdy
 */

#include "MOTOR.h"

static void wait_ms(uint32_t time){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<time;i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <wait_ms+0x26>
		for(j=0;j<255;j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <wait_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <wait_ms+0x14>
	for(i=0;i<time;i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <wait_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <HAL_MOTORS_Init>:


void HAL_MOTORS_Init(void){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0

	GPIO_PIN_CONFIG_T pincfg;
	pincfg.GPIO_PIN_NUMBER = GPIO_PIN_0;
 80001b2:	2301      	movs	r3, #1
 80001b4:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001b6:	2304      	movs	r3, #4
 80001b8:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80001ba:	2301      	movs	r3, #1
 80001bc:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &pincfg);
 80001be:	1d3b      	adds	r3, r7, #4
 80001c0:	4619      	mov	r1, r3
 80001c2:	4814      	ldr	r0, [pc, #80]	; (8000214 <HAL_MOTORS_Init+0x68>)
 80001c4:	f000 f96e 	bl	80004a4 <MCAL_GPIO_Init>

	pincfg.GPIO_PIN_NUMBER = GPIO_PIN_1;
 80001c8:	2302      	movs	r3, #2
 80001ca:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001cc:	2304      	movs	r3, #4
 80001ce:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80001d0:	2301      	movs	r3, #1
 80001d2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &pincfg);
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	4619      	mov	r1, r3
 80001d8:	480e      	ldr	r0, [pc, #56]	; (8000214 <HAL_MOTORS_Init+0x68>)
 80001da:	f000 f963 	bl	80004a4 <MCAL_GPIO_Init>

	pincfg.GPIO_PIN_NUMBER = GPIO_PIN_2;
 80001de:	2304      	movs	r3, #4
 80001e0:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001e2:	2304      	movs	r3, #4
 80001e4:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80001e6:	2301      	movs	r3, #1
 80001e8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &pincfg);
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	4619      	mov	r1, r3
 80001ee:	4809      	ldr	r0, [pc, #36]	; (8000214 <HAL_MOTORS_Init+0x68>)
 80001f0:	f000 f958 	bl	80004a4 <MCAL_GPIO_Init>

	pincfg.GPIO_PIN_NUMBER = GPIO_PIN_3;
 80001f4:	2308      	movs	r3, #8
 80001f6:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001f8:	2304      	movs	r3, #4
 80001fa:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80001fc:	2301      	movs	r3, #1
 80001fe:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &pincfg);
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	4619      	mov	r1, r3
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <HAL_MOTORS_Init+0x68>)
 8000206:	f000 f94d 	bl	80004a4 <MCAL_GPIO_Init>

}
 800020a:	bf00      	nop
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40010800 	.word	0x40010800

08000218 <STOP>:

void STOP(void){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0

	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	4809      	ldr	r0, [pc, #36]	; (8000248 <STOP+0x30>)
 8000222:	f000 f9bb 	bl	800059c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	4807      	ldr	r0, [pc, #28]	; (8000248 <STOP+0x30>)
 800022c:	f000 f9b6 	bl	800059c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	2104      	movs	r1, #4
 8000234:	4804      	ldr	r0, [pc, #16]	; (8000248 <STOP+0x30>)
 8000236:	f000 f9b1 	bl	800059c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	4802      	ldr	r0, [pc, #8]	; (8000248 <STOP+0x30>)
 8000240:	f000 f9ac 	bl	800059c <MCAL_GPIO_WritePin>

}
 8000244:	bf00      	nop
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40010800 	.word	0x40010800

0800024c <forword>:

void forword(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
/*N1,N3 ARE  HIGH*/

	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	2101      	movs	r1, #1
 8000254:	4809      	ldr	r0, [pc, #36]	; (800027c <forword+0x30>)
 8000256:	f000 f9a1 	bl	800059c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 800025a:	2200      	movs	r2, #0
 800025c:	2102      	movs	r1, #2
 800025e:	4807      	ldr	r0, [pc, #28]	; (800027c <forword+0x30>)
 8000260:	f000 f99c 	bl	800059c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET);
 8000264:	2201      	movs	r2, #1
 8000266:	2104      	movs	r1, #4
 8000268:	4804      	ldr	r0, [pc, #16]	; (800027c <forword+0x30>)
 800026a:	f000 f997 	bl	800059c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2108      	movs	r1, #8
 8000272:	4802      	ldr	r0, [pc, #8]	; (800027c <forword+0x30>)
 8000274:	f000 f992 	bl	800059c <MCAL_GPIO_WritePin>

}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40010800 	.word	0x40010800

08000280 <BACK>:


void BACK(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	2101      	movs	r1, #1
 8000288:	4809      	ldr	r0, [pc, #36]	; (80002b0 <BACK+0x30>)
 800028a:	f000 f987 	bl	800059c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 800028e:	2201      	movs	r2, #1
 8000290:	2102      	movs	r1, #2
 8000292:	4807      	ldr	r0, [pc, #28]	; (80002b0 <BACK+0x30>)
 8000294:	f000 f982 	bl	800059c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	2104      	movs	r1, #4
 800029c:	4804      	ldr	r0, [pc, #16]	; (80002b0 <BACK+0x30>)
 800029e:	f000 f97d 	bl	800059c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);
 80002a2:	2201      	movs	r2, #1
 80002a4:	2108      	movs	r1, #8
 80002a6:	4802      	ldr	r0, [pc, #8]	; (80002b0 <BACK+0x30>)
 80002a8:	f000 f978 	bl	800059c <MCAL_GPIO_WritePin>

}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40010800 	.word	0x40010800

080002b4 <RIGHT>:


void RIGHT(void){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0

	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	2101      	movs	r1, #1
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <RIGHT+0x3c>)
 80002be:	f000 f96d 	bl	800059c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2102      	movs	r1, #2
 80002c6:	480a      	ldr	r0, [pc, #40]	; (80002f0 <RIGHT+0x3c>)
 80002c8:	f000 f968 	bl	800059c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_RESET);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2104      	movs	r1, #4
 80002d0:	4807      	ldr	r0, [pc, #28]	; (80002f0 <RIGHT+0x3c>)
 80002d2:	f000 f963 	bl	800059c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2108      	movs	r1, #8
 80002da:	4805      	ldr	r0, [pc, #20]	; (80002f0 <RIGHT+0x3c>)
 80002dc:	f000 f95e 	bl	800059c <MCAL_GPIO_WritePin>
	 wait_ms(3000);
 80002e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80002e4:	f7ff ff44 	bl	8000170 <wait_ms>
							 forword();
 80002e8:	f7ff ffb0 	bl	800024c <forword>


}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40010800 	.word	0x40010800

080002f4 <LEFT>:
void LEFT(void){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2101      	movs	r1, #1
 80002fc:	480c      	ldr	r0, [pc, #48]	; (8000330 <LEFT+0x3c>)
 80002fe:	f000 f94d 	bl	800059c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	2102      	movs	r1, #2
 8000306:	480a      	ldr	r0, [pc, #40]	; (8000330 <LEFT+0x3c>)
 8000308:	f000 f948 	bl	800059c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET);
 800030c:	2201      	movs	r2, #1
 800030e:	2104      	movs	r1, #4
 8000310:	4807      	ldr	r0, [pc, #28]	; (8000330 <LEFT+0x3c>)
 8000312:	f000 f943 	bl	800059c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);
 8000316:	2200      	movs	r2, #0
 8000318:	2108      	movs	r1, #8
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <LEFT+0x3c>)
 800031c:	f000 f93e 	bl	800059c <MCAL_GPIO_WritePin>

	 wait_ms(3000);
 8000320:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000324:	f7ff ff24 	bl	8000170 <wait_ms>
			 forword();
 8000328:	f7ff ff90 	bl	800024c <forword>
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40010800 	.word	0x40010800

08000334 <Get_Bit_Location>:


#include "GPIO.h"


uint8_t Get_Bit_Location(uint16_t PinNumber){
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 800033e:	88fb      	ldrh	r3, [r7, #6]
 8000340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000344:	f000 80a5 	beq.w	8000492 <Get_Bit_Location+0x15e>
 8000348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800034c:	f300 80a3 	bgt.w	8000496 <Get_Bit_Location+0x162>
 8000350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000354:	f000 809b 	beq.w	800048e <Get_Bit_Location+0x15a>
 8000358:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800035c:	f300 809b 	bgt.w	8000496 <Get_Bit_Location+0x162>
 8000360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000364:	f000 8091 	beq.w	800048a <Get_Bit_Location+0x156>
 8000368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800036c:	f300 8093 	bgt.w	8000496 <Get_Bit_Location+0x162>
 8000370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000374:	f000 8087 	beq.w	8000486 <Get_Bit_Location+0x152>
 8000378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800037c:	f300 808b 	bgt.w	8000496 <Get_Bit_Location+0x162>
 8000380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000384:	d07d      	beq.n	8000482 <Get_Bit_Location+0x14e>
 8000386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800038a:	f300 8084 	bgt.w	8000496 <Get_Bit_Location+0x162>
 800038e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000392:	d074      	beq.n	800047e <Get_Bit_Location+0x14a>
 8000394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000398:	dc7d      	bgt.n	8000496 <Get_Bit_Location+0x162>
 800039a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800039e:	d06c      	beq.n	800047a <Get_Bit_Location+0x146>
 80003a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003a4:	dc77      	bgt.n	8000496 <Get_Bit_Location+0x162>
 80003a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003aa:	d064      	beq.n	8000476 <Get_Bit_Location+0x142>
 80003ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003b0:	dc71      	bgt.n	8000496 <Get_Bit_Location+0x162>
 80003b2:	2b80      	cmp	r3, #128	; 0x80
 80003b4:	d05d      	beq.n	8000472 <Get_Bit_Location+0x13e>
 80003b6:	2b80      	cmp	r3, #128	; 0x80
 80003b8:	dc6d      	bgt.n	8000496 <Get_Bit_Location+0x162>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	dc48      	bgt.n	8000450 <Get_Bit_Location+0x11c>
 80003be:	2b00      	cmp	r3, #0
 80003c0:	dd69      	ble.n	8000496 <Get_Bit_Location+0x162>
 80003c2:	3b01      	subs	r3, #1
 80003c4:	2b1f      	cmp	r3, #31
 80003c6:	d866      	bhi.n	8000496 <Get_Bit_Location+0x162>
 80003c8:	a201      	add	r2, pc, #4	; (adr r2, 80003d0 <Get_Bit_Location+0x9c>)
 80003ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ce:	bf00      	nop
 80003d0:	08000457 	.word	0x08000457
 80003d4:	0800045b 	.word	0x0800045b
 80003d8:	08000497 	.word	0x08000497
 80003dc:	0800045f 	.word	0x0800045f
 80003e0:	08000497 	.word	0x08000497
 80003e4:	08000497 	.word	0x08000497
 80003e8:	08000497 	.word	0x08000497
 80003ec:	08000463 	.word	0x08000463
 80003f0:	08000497 	.word	0x08000497
 80003f4:	08000497 	.word	0x08000497
 80003f8:	08000497 	.word	0x08000497
 80003fc:	08000497 	.word	0x08000497
 8000400:	08000497 	.word	0x08000497
 8000404:	08000497 	.word	0x08000497
 8000408:	08000497 	.word	0x08000497
 800040c:	08000467 	.word	0x08000467
 8000410:	08000497 	.word	0x08000497
 8000414:	08000497 	.word	0x08000497
 8000418:	08000497 	.word	0x08000497
 800041c:	08000497 	.word	0x08000497
 8000420:	08000497 	.word	0x08000497
 8000424:	08000497 	.word	0x08000497
 8000428:	08000497 	.word	0x08000497
 800042c:	08000497 	.word	0x08000497
 8000430:	08000497 	.word	0x08000497
 8000434:	08000497 	.word	0x08000497
 8000438:	08000497 	.word	0x08000497
 800043c:	08000497 	.word	0x08000497
 8000440:	08000497 	.word	0x08000497
 8000444:	08000497 	.word	0x08000497
 8000448:	08000497 	.word	0x08000497
 800044c:	0800046b 	.word	0x0800046b
 8000450:	2b40      	cmp	r3, #64	; 0x40
 8000452:	d00c      	beq.n	800046e <Get_Bit_Location+0x13a>
 8000454:	e01f      	b.n	8000496 <Get_Bit_Location+0x162>
		case GPIO_PIN_0:
			return 0;
 8000456:	2300      	movs	r3, #0
 8000458:	e01e      	b.n	8000498 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_1:
			return 4;
 800045a:	2304      	movs	r3, #4
 800045c:	e01c      	b.n	8000498 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_2:
			return 8;
 800045e:	2308      	movs	r3, #8
 8000460:	e01a      	b.n	8000498 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_3:
			return 12;
 8000462:	230c      	movs	r3, #12
 8000464:	e018      	b.n	8000498 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_4:
			return 16;
 8000466:	2310      	movs	r3, #16
 8000468:	e016      	b.n	8000498 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_5:
			return 20;
 800046a:	2314      	movs	r3, #20
 800046c:	e014      	b.n	8000498 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_6:
			return 24;
 800046e:	2318      	movs	r3, #24
 8000470:	e012      	b.n	8000498 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_7:
			return 28;
 8000472:	231c      	movs	r3, #28
 8000474:	e010      	b.n	8000498 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_8:
			return 0;
 8000476:	2300      	movs	r3, #0
 8000478:	e00e      	b.n	8000498 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_9:
			return 4;
 800047a:	2304      	movs	r3, #4
 800047c:	e00c      	b.n	8000498 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_10:
			return 8;
 800047e:	2308      	movs	r3, #8
 8000480:	e00a      	b.n	8000498 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_11:
			return 12;
 8000482:	230c      	movs	r3, #12
 8000484:	e008      	b.n	8000498 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_12:
			return 16;
 8000486:	2310      	movs	r3, #16
 8000488:	e006      	b.n	8000498 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_13:
			return 20;
 800048a:	2314      	movs	r3, #20
 800048c:	e004      	b.n	8000498 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_14:
			return 24;
 800048e:	2318      	movs	r3, #24
 8000490:	e002      	b.n	8000498 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_15:
			return 28;
 8000492:	231c      	movs	r3, #28
 8000494:	e000      	b.n	8000498 <Get_Bit_Location+0x164>
			break;
	}
	return 0;
 8000496:	2300      	movs	r3, #0
}
 8000498:	4618      	mov	r0, r3
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop

080004a4 <MCAL_GPIO_Init>:
 * @param[in]	- GPIOx: Where x can be (A...E) to select the GPIO peripheral
 * @param[in]	- PinConfig: Pointer to GPIO_PIN_CONFIG_T structure that contains the configurations of GPIO pin
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_GPIO_Init(GPIO_t *GPIOx,GPIO_PIN_CONFIG_T *PinConfig){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..E)
	//Port configuration register high (GPIOx_CRH) (x=A..E)
	volatile uint32_t *ConfiguredRegister = NULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
	uint32_t pin_config = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60bb      	str	r3, [r7, #8]
	if(PinConfig->GPIO_PIN_NUMBER < GPIO_PIN_8){
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	2bff      	cmp	r3, #255	; 0xff
 80004bc:	d802      	bhi.n	80004c4 <MCAL_GPIO_Init+0x20>
		ConfiguredRegister = &(GPIOx->CRL);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	e002      	b.n	80004ca <MCAL_GPIO_Init+0x26>
	}
	else{
		ConfiguredRegister = &(GPIOx->CRH);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	3304      	adds	r3, #4
 80004c8:	60fb      	str	r3, [r7, #12]
	}
	// We should clear registers CNFy[1:0]: Port x configuration bits (y= 0 .. 7), MODEy[1:0]: Port x mode bits (y= 0 .. 7)
	(*ConfiguredRegister) &= ~(0xf << (Get_Bit_Location(PinConfig->GPIO_PIN_NUMBER)));
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ff30 	bl	8000334 <Get_Bit_Location>
 80004d4:	4603      	mov	r3, r0
 80004d6:	461a      	mov	r2, r3
 80004d8:	230f      	movs	r3, #15
 80004da:	4093      	lsls	r3, r2
 80004dc:	43da      	mvns	r2, r3
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	401a      	ands	r2, r3
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	601a      	str	r2, [r3, #0]
	// if GPIO ====>Output
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP))
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	789b      	ldrb	r3, [r3, #2]
 80004ec:	2b05      	cmp	r3, #5
 80004ee:	d00b      	beq.n	8000508 <MCAL_GPIO_Init+0x64>
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	789b      	ldrb	r3, [r3, #2]
 80004f4:	2b04      	cmp	r3, #4
 80004f6:	d007      	beq.n	8000508 <MCAL_GPIO_Init+0x64>
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	789b      	ldrb	r3, [r3, #2]
 80004fc:	2b07      	cmp	r3, #7
 80004fe:	d003      	beq.n	8000508 <MCAL_GPIO_Init+0x64>
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	789b      	ldrb	r3, [r3, #2]
 8000504:	2b06      	cmp	r3, #6
 8000506:	d10a      	bne.n	800051e <MCAL_GPIO_Init+0x7a>
	{
		//set CNFy[1:0],MODEy[1:0]
		pin_config = ( ( (PinConfig->GPIO_MODE-4) << 2 ) | (PinConfig->GPIO_OUTPUT_SPEED) ) &0x0f ;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	789b      	ldrb	r3, [r3, #2]
 800050c:	3b04      	subs	r3, #4
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	683a      	ldr	r2, [r7, #0]
 8000512:	78d2      	ldrb	r2, [r2, #3]
 8000514:	4313      	orrs	r3, r2
 8000516:	f003 030f 	and.w	r3, r3, #15
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	e02b      	b.n	8000576 <MCAL_GPIO_Init+0xd2>
	}
	// if GPIO ====>Input 00: Input mode (reset state)
	else{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog)){
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	789b      	ldrb	r3, [r3, #2]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d003      	beq.n	800052e <MCAL_GPIO_Init+0x8a>
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	789b      	ldrb	r3, [r3, #2]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d106      	bne.n	800053c <MCAL_GPIO_Init+0x98>
			//set CNFy[1:0],MODEy[1:0]
			pin_config = (( ( (PinConfig->GPIO_MODE) << 2 ) | 0x0) &0x0f);
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	789b      	ldrb	r3, [r3, #2]
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	f003 030f 	and.w	r3, r3, #15
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	e01c      	b.n	8000576 <MCAL_GPIO_Init+0xd2>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT){
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	789b      	ldrb	r3, [r3, #2]
 8000540:	2b08      	cmp	r3, #8
 8000542:	d102      	bne.n	800054a <MCAL_GPIO_Init+0xa6>
			//set CNFy[1:0],MODEy[1:0]
			pin_config = (( ( GPIO_MODE_INPUT_FLO << 2 ) | 0x0) &0x0f);
 8000544:	2304      	movs	r3, #4
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	e015      	b.n	8000576 <MCAL_GPIO_Init+0xd2>
		}
		//Input with pull-up / pull-down
		else{
			pin_config = (( ( GPIO_MODE_INPUT_PU << 2 ) | 0x0) &0x0f);
 800054a:	2308      	movs	r3, #8
 800054c:	60bb      	str	r3, [r7, #8]
			if(PinConfig->GPIO_MODE ==  GPIO_MODE_INPUT_PU){
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	789b      	ldrb	r3, [r3, #2]
 8000552:	2b02      	cmp	r3, #2
 8000554:	d107      	bne.n	8000566 <MCAL_GPIO_Init+0xc2>
				//PxODR register 1 Input pull-up
				GPIOx->ODR |= PinConfig->GPIO_PIN_NUMBER;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	683a      	ldr	r2, [r7, #0]
 800055c:	8812      	ldrh	r2, [r2, #0]
 800055e:	431a      	orrs	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	e007      	b.n	8000576 <MCAL_GPIO_Init+0xd2>
			}
			else{
				//PxODR register 0 Input pull-down
				GPIOx->ODR &= ~(PinConfig->GPIO_PIN_NUMBER);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	8812      	ldrh	r2, [r2, #0]
 800056e:	43d2      	mvns	r2, r2
 8000570:	401a      	ands	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Write on CNFy[1:0]: Port x configuration bits (y= 0 .. 7), MODEy[1:0]: Port x mode bits (y= 0 .. 7)
	(*ConfiguredRegister) |= (pin_config << (Get_Bit_Location(PinConfig->GPIO_PIN_NUMBER)));
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	881b      	ldrh	r3, [r3, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff feda 	bl	8000334 <Get_Bit_Location>
 8000580:	4603      	mov	r3, r0
 8000582:	461a      	mov	r2, r3
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	fa03 f202 	lsl.w	r2, r3, r2
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	431a      	orrs	r2, r3
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	601a      	str	r2, [r3, #0]
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <MCAL_GPIO_WritePin>:
 * @param[in]	- PinNumber : set pin number according to @ref GPIO_PIN_NUMBER
 * @param[in]	- value: value which will be written on pin
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_GPIO_WritePin(GPIO_t *GPIOx,uint16_t PinNumber,uint8_t value){
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	807b      	strh	r3, [r7, #2]
 80005a8:	4613      	mov	r3, r2
 80005aa:	707b      	strb	r3, [r7, #1]
	if(value != GPIO_PIN_RESET){
 80005ac:	787b      	ldrb	r3, [r7, #1]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d003      	beq.n	80005ba <MCAL_GPIO_WritePin+0x1e>
		//Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOx->BSRR = PinNumber;
 80005b2:	887a      	ldrh	r2, [r7, #2]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	611a      	str	r2, [r3, #16]
0: No action on the corresponding ODRx bit
1: Reset the corresponding ODRx bit*/
		GPIOx->BRR =(uint32_t)PinNumber;

	}
}
 80005b8:	e002      	b.n	80005c0 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR =(uint32_t)PinNumber;
 80005ba:	887a      	ldrh	r2, [r7, #2]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	615a      	str	r2, [r3, #20]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr
	...

080005cc <MCAL_RCC_GetSYS_CLKFreq>:
 * @brief		- After a system reset, the HSI oscillator is selected as system clock. When a clock source is
used directly or through the PLL as system clock, it is not possible to stop it.
 * @retval		- uint32_t : amount of Frequancy generated by system clock
 * Note			- none
 * */
uint32_t MCAL_RCC_GetSYS_CLKFreq(void){
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
Set and cleared by hardware to indicate which clock source is used as system clock.
00: HSI oscillator used as system clock
01: HSE oscillator used as system clock
10: PLL used as system clock
11: not applicable*/
	switch ((RCC->CFGR >> 2)&0b11){
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	089b      	lsrs	r3, r3, #2
 80005d6:	f003 0303 	and.w	r3, r3, #3
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d00a      	beq.n	80005f4 <MCAL_RCC_GetSYS_CLKFreq+0x28>
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d80a      	bhi.n	80005f8 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d002      	beq.n	80005ec <MCAL_RCC_GetSYS_CLKFreq+0x20>
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d002      	beq.n	80005f0 <MCAL_RCC_GetSYS_CLKFreq+0x24>
 80005ea:	e005      	b.n	80005f8 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
		case 0:
			return HSI_RC_CLK;
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 80005ee:	e003      	b.n	80005f8 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;
		case 1:
			return HSE_CLK;
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 80005f2:	e001      	b.n	80005f8 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;
		case 2:
			return 16000000;
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 80005f6:	e7ff      	b.n	80005f8 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;
	}
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	40021000 	.word	0x40021000
 8000604:	007a1200 	.word	0x007a1200
 8000608:	00f42400 	.word	0x00f42400

0800060c <MCAL_RCC_Get_HCLKFreq>:
 * @Fn			- MCAL_RCC_Get_HCLKFreq
 * @brief		- Get HCLK source and Compute PCLK1 frequency
 * @retval		- uint32_t ====>
 * Note			- none
 * */
uint32_t MCAL_RCC_Get_HCLKFreq(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetSYS_CLKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  );
 8000610:	f7ff ffdc 	bl	80005cc <MCAL_RCC_GetSYS_CLKFreq>
 8000614:	4602      	mov	r2, r0
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <MCAL_RCC_Get_HCLKFreq+0x20>)
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	091b      	lsrs	r3, r3, #4
 800061c:	f003 030f 	and.w	r3, r3, #15
 8000620:	4903      	ldr	r1, [pc, #12]	; (8000630 <MCAL_RCC_Get_HCLKFreq+0x24>)
 8000622:	5ccb      	ldrb	r3, [r1, r3]
 8000624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000628:	4618      	mov	r0, r3
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000
 8000630:	08000b48 	.word	0x08000b48

08000634 <MCAL_RCC_Get_PCLK1Freq>:
 * @Fn			- MCAL_RCC_Get_PCLK1Freq
 * @brief		- Get HCLK source and Compute PCLK1 frequency
 * @retval		- uint32_t ====> PCLK1 frequency
 * Note			- none
 * */
uint32_t MCAL_RCC_Get_PCLK1Freq(void){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	return (MCAL_RCC_Get_HCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  );
 8000638:	f7ff ffe8 	bl	800060c <MCAL_RCC_Get_HCLKFreq>
 800063c:	4602      	mov	r2, r0
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <MCAL_RCC_Get_PCLK1Freq+0x20>)
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	0a1b      	lsrs	r3, r3, #8
 8000644:	f003 0307 	and.w	r3, r3, #7
 8000648:	4903      	ldr	r1, [pc, #12]	; (8000658 <MCAL_RCC_Get_PCLK1Freq+0x24>)
 800064a:	5ccb      	ldrb	r3, [r1, r3]
 800064c:	fa22 f303 	lsr.w	r3, r2, r3

}
 8000650:	4618      	mov	r0, r3
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000
 8000658:	08000b40 	.word	0x08000b40

0800065c <MCAL_RCC_Get_PCLK2Freq>:
 * @Fn			- MCAL_RCC_GetSYS_PCLK2Freq
 * @brief		- Get HCLK source and Compute PCLK2 frequency
 * @retval		- uint32_t ====> PCLK1 frequency
 * Note			- none
 * */
uint32_t MCAL_RCC_Get_PCLK2Freq(void){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	return (MCAL_RCC_Get_HCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11 ) & 0b111) ]  );
 8000660:	f7ff ffd4 	bl	800060c <MCAL_RCC_Get_HCLKFreq>
 8000664:	4602      	mov	r2, r0
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <MCAL_RCC_Get_PCLK2Freq+0x20>)
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	0adb      	lsrs	r3, r3, #11
 800066c:	f003 0307 	and.w	r3, r3, #7
 8000670:	4903      	ldr	r1, [pc, #12]	; (8000680 <MCAL_RCC_Get_PCLK2Freq+0x24>)
 8000672:	5ccb      	ldrb	r3, [r1, r3]
 8000674:	fa22 f303 	lsr.w	r3, r2, r3

}
 8000678:	4618      	mov	r0, r3
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000
 8000680:	08000b40 	.word	0x08000b40

08000684 <MCAL_UART_GPIO_Set_Pins>:
#include "USART.h"

USART_CONFIG_t* Global_UART_Config  = NULL ;


void MCAL_UART_GPIO_Set_Pins (USART_t *USARTx){
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	GPIO_PIN_CONFIG_T PinCfg ;

		if ( USARTx == USART1 )
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a2b      	ldr	r2, [pc, #172]	; (800073c <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d118      	bne.n	80006c6 <MCAL_UART_GPIO_Set_Pins+0x42>
			//PA10 RX
			//PA11 CTS
			//PA12 RTS

			//PA9 TX
			PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_9;
 8000694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000698:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800069a:	2306      	movs	r3, #6
 800069c:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 800069e:	2301      	movs	r3, #1
 80006a0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	4619      	mov	r1, r3
 80006a8:	4825      	ldr	r0, [pc, #148]	; (8000740 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80006aa:	f7ff fefb 	bl	80004a4 <MCAL_GPIO_Init>

			//PA10 RX
			PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_10;
 80006ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b2:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80006b4:	2308      	movs	r3, #8
 80006b6:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	4619      	mov	r1, r3
 80006be:	4820      	ldr	r0, [pc, #128]	; (8000740 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80006c0:	f7ff fef0 	bl	80004a4 <MCAL_GPIO_Init>
				PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
				MCAL_GPIO_Init(GPIOB, &PinCfg);

			}
		}
}
 80006c4:	e036      	b.n	8000734 <MCAL_UART_GPIO_Set_Pins+0xb0>
		else if ( USARTx == USART2 )
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a1e      	ldr	r2, [pc, #120]	; (8000744 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d116      	bne.n	80006fc <MCAL_UART_GPIO_Set_Pins+0x78>
			PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_2;
 80006ce:	2304      	movs	r3, #4
 80006d0:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80006d2:	2306      	movs	r3, #6
 80006d4:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80006d6:	2301      	movs	r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	4619      	mov	r1, r3
 80006e0:	4817      	ldr	r0, [pc, #92]	; (8000740 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80006e2:	f7ff fedf 	bl	80004a4 <MCAL_GPIO_Init>
			PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_3;
 80006e6:	2308      	movs	r3, #8
 80006e8:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80006ea:	2308      	movs	r3, #8
 80006ec:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	4619      	mov	r1, r3
 80006f4:	4812      	ldr	r0, [pc, #72]	; (8000740 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80006f6:	f7ff fed5 	bl	80004a4 <MCAL_GPIO_Init>
}
 80006fa:	e01b      	b.n	8000734 <MCAL_UART_GPIO_Set_Pins+0xb0>
		else if ( USARTx == USART3 )
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d117      	bne.n	8000734 <MCAL_UART_GPIO_Set_Pins+0xb0>
			PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_10;
 8000704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000708:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800070a:	2306      	movs	r3, #6
 800070c:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 800070e:	2301      	movs	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	4619      	mov	r1, r3
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <MCAL_UART_GPIO_Set_Pins+0xc8>)
 800071a:	f7ff fec3 	bl	80004a4 <MCAL_GPIO_Init>
			PinCfg.GPIO_PIN_NUMBER = GPIO_PIN_11;
 800071e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000722:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000724:	2308      	movs	r3, #8
 8000726:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4619      	mov	r1, r3
 800072e:	4807      	ldr	r0, [pc, #28]	; (800074c <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000730:	f7ff feb8 	bl	80004a4 <MCAL_GPIO_Init>
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40013800 	.word	0x40013800
 8000740:	40010800 	.word	0x40010800
 8000744:	40004400 	.word	0x40004400
 8000748:	40004800 	.word	0x40004800
 800074c:	40010c00 	.word	0x40010c00

08000750 <MCAL_USART_Init>:
 * @param[in]	- USARTx: Where x can be (1...3) to select the USART peripheral
 * @param[in]	- USARTx_config: Pointer to USART_CONFIG_t structure that contains the configurations of USART peripheral
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_USART_Init(USART_t *USARTx , USART_CONFIG_t *USARTx_config){
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
	Global_UART_Config = USARTx_config;
 800075a:	4a58      	ldr	r2, [pc, #352]	; (80008bc <MCAL_USART_Init+0x16c>)
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	6013      	str	r3, [r2, #0]
	uint32_t pclk ,BRR  ;
	//	enable the Clock for given USART peripheral
	if(USARTx == USART1){RCC_USART1_CLK_EN();}
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a57      	ldr	r2, [pc, #348]	; (80008c0 <MCAL_USART_Init+0x170>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d106      	bne.n	8000776 <MCAL_USART_Init+0x26>
 8000768:	4b56      	ldr	r3, [pc, #344]	; (80008c4 <MCAL_USART_Init+0x174>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a55      	ldr	r2, [pc, #340]	; (80008c4 <MCAL_USART_Init+0x174>)
 800076e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	e014      	b.n	80007a0 <MCAL_USART_Init+0x50>
	else if(USARTx == USART2){RCC_USART2_CLK_EN();}
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a53      	ldr	r2, [pc, #332]	; (80008c8 <MCAL_USART_Init+0x178>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d106      	bne.n	800078c <MCAL_USART_Init+0x3c>
 800077e:	4b51      	ldr	r3, [pc, #324]	; (80008c4 <MCAL_USART_Init+0x174>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	4a50      	ldr	r2, [pc, #320]	; (80008c4 <MCAL_USART_Init+0x174>)
 8000784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000788:	61d3      	str	r3, [r2, #28]
 800078a:	e009      	b.n	80007a0 <MCAL_USART_Init+0x50>
	else if(USARTx == USART3){RCC_USART3_CLK_EN();}
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a4f      	ldr	r2, [pc, #316]	; (80008cc <MCAL_USART_Init+0x17c>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d105      	bne.n	80007a0 <MCAL_USART_Init+0x50>
 8000794:	4b4b      	ldr	r3, [pc, #300]	; (80008c4 <MCAL_USART_Init+0x174>)
 8000796:	69db      	ldr	r3, [r3, #28]
 8000798:	4a4a      	ldr	r2, [pc, #296]	; (80008c4 <MCAL_USART_Init+0x174>)
 800079a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800079e:	61d3      	str	r3, [r2, #28]

	//enable USART
	USARTx ->CR1 |= (1<<13);//Bit 13 UE: USART enable
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	60da      	str	r2, [r3, #12]
	//enable USART mode
	USARTx ->CR1 |= USARTx_config->USART_Mode;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	7892      	ldrb	r2, [r2, #2]
 80007b4:	431a      	orrs	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	60da      	str	r2, [r3, #12]
	//Parity selection
	USARTx ->CR1 |= USARTx_config->Parity;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	7912      	ldrb	r2, [r2, #4]
 80007c2:	431a      	orrs	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	60da      	str	r2, [r3, #12]
	//M: Word length
	USARTx ->CR1 |= USARTx_config->Word_Length;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	78d2      	ldrb	r2, [r2, #3]
 80007d0:	431a      	orrs	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	60da      	str	r2, [r3, #12]
	// STOP: STOP bits
	USARTx ->CR2 |= USARTx_config->Stop_Bits;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	691b      	ldr	r3, [r3, #16]
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	7852      	ldrb	r2, [r2, #1]
 80007de:	431a      	orrs	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	611a      	str	r2, [r3, #16]
	//Hardware flow control
	USARTx ->CR3 |= USARTx_config->HW_FLW_CTRL;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	7992      	ldrb	r2, [r2, #6]
 80007ec:	431a      	orrs	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	615a      	str	r2, [r3, #20]

	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if(USARTx == USART1){pclk = MCAL_RCC_Get_PCLK2Freq();}
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a32      	ldr	r2, [pc, #200]	; (80008c0 <MCAL_USART_Init+0x170>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d103      	bne.n	8000802 <MCAL_USART_Init+0xb2>
 80007fa:	f7ff ff2f 	bl	800065c <MCAL_RCC_Get_PCLK2Freq>
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	e002      	b.n	8000808 <MCAL_USART_Init+0xb8>
	else {
		pclk = MCAL_RCC_Get_PCLK1Freq();
 8000802:	f7ff ff17 	bl	8000634 <MCAL_RCC_Get_PCLK1Freq>
 8000806:	60f8      	str	r0, [r7, #12]
	}
	BRR = UART_BRR_Register(pclk, USARTx_config->Baud_Rate );
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	461a      	mov	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	fbb3 f3f2 	udiv	r3, r3, r2
 8000816:	0119      	lsls	r1, r3, #4
 8000818:	68fa      	ldr	r2, [r7, #12]
 800081a:	4613      	mov	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	009a      	lsls	r2, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	7812      	ldrb	r2, [r2, #0]
 8000828:	0092      	lsls	r2, r2, #2
 800082a:	fbb3 f2f2 	udiv	r2, r3, r2
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	011b      	lsls	r3, r3, #4
 8000834:	4618      	mov	r0, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	fbb3 f3f0 	udiv	r3, r3, r0
 800083c:	2064      	movs	r0, #100	; 0x64
 800083e:	fb00 f303 	mul.w	r3, r0, r3
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	011b      	lsls	r3, r3, #4
 8000846:	4a22      	ldr	r2, [pc, #136]	; (80008d0 <MCAL_USART_Init+0x180>)
 8000848:	fba2 2303 	umull	r2, r3, r2, r3
 800084c:	095b      	lsrs	r3, r3, #5
 800084e:	f003 030f 	and.w	r3, r3, #15
 8000852:	430b      	orrs	r3, r1
 8000854:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	609a      	str	r2, [r3, #8]
	//configure interrupt
	if(USARTx_config->IRQ_Enable != USART_IRQ_NONE ){
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	795b      	ldrb	r3, [r3, #5]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d026      	beq.n	80008b2 <MCAL_USART_Init+0x162>
		USARTx ->CR1 |= USARTx_config->IRQ_Enable;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	7952      	ldrb	r2, [r2, #5]
 800086c:	431a      	orrs	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	60da      	str	r2, [r3, #12]
		//enable NVIC
		if(USARTx == USART1){NVIC_IRQ37_USART1_ENABLE;}
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <MCAL_USART_Init+0x170>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d106      	bne.n	8000888 <MCAL_USART_Init+0x138>
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MCAL_USART_Init+0x184>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <MCAL_USART_Init+0x184>)
 8000880:	f043 0320 	orr.w	r3, r3, #32
 8000884:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART2){NVIC_IRQ38_USART2_ENABLE;}
		else if(USARTx == USART3){NVIC_IRQ39_USART3_ENABLE;}
	}
}
 8000886:	e014      	b.n	80008b2 <MCAL_USART_Init+0x162>
		else if(USARTx == USART2){NVIC_IRQ38_USART2_ENABLE;}
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <MCAL_USART_Init+0x178>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d106      	bne.n	800089e <MCAL_USART_Init+0x14e>
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MCAL_USART_Init+0x184>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <MCAL_USART_Init+0x184>)
 8000896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	e009      	b.n	80008b2 <MCAL_USART_Init+0x162>
		else if(USARTx == USART3){NVIC_IRQ39_USART3_ENABLE;}
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <MCAL_USART_Init+0x17c>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d105      	bne.n	80008b2 <MCAL_USART_Init+0x162>
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MCAL_USART_Init+0x184>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <MCAL_USART_Init+0x184>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6013      	str	r3, [r2, #0]
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000001c 	.word	0x2000001c
 80008c0:	40013800 	.word	0x40013800
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40004400 	.word	0x40004400
 80008cc:	40004800 	.word	0x40004800
 80008d0:	51eb851f 	.word	0x51eb851f
 80008d4:	e000e104 	.word	0xe000e104

080008d8 <MCAL_USART_Receive>:
	4. Select DMA enable (DMAR) in USART_CR3 if multibuffer communication is to take
	place. Configure the DMA register as explained in multibuffer communication. STEP 3
	5. Select the desired baud rate using the baud rate register USART_BRR
	6. Set the RE bit USART_CR1. This enables the receiver which begins searching for a start bit
 * */
void MCAL_USART_Receive(USART_t * USARTx , uint16_t *Buffer,enum Polling_mechism PollingEn){
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	4613      	mov	r3, r2
 80008e4:	71fb      	strb	r3, [r7, #7]
	if (PollingEn == enable)
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d106      	bne.n	80008fa <MCAL_USART_Receive+0x22>
		//Bit 5 RXNE: Read data register not empty
		while(! (USARTx->SR & 1<<5 ) );
 80008ec:	bf00      	nop
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f003 0320 	and.w	r3, r3, #32
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d0f9      	beq.n	80008ee <MCAL_USART_Receive+0x16>
			*((uint16_t*) Buffer) = ( USARTx->DR  & (uint8_t)0xFF );

		}
	}else{
		//This is 8bit data
			if (Global_UART_Config->Parity ==USART_Parity_NONE)
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <MCAL_USART_Receive+0x58>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	791b      	ldrb	r3, [r3, #4]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d107      	bne.n	8000914 <MCAL_USART_Receive+0x3c>
			{
				//no parity So all 8bit are considered data
				*((uint16_t*) Buffer) = ( USARTx->DR  & (uint8_t)0xFF ) ;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	b29b      	uxth	r3, r3
 800090a:	b2db      	uxtb	r3, r3
 800090c:	b29a      	uxth	r2, r3
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	801a      	strh	r2, [r3, #0]

			}

	}

}
 8000912:	e007      	b.n	8000924 <MCAL_USART_Receive+0x4c>
				*((uint16_t*) Buffer) = ( USARTx->DR  & (uint8_t)0X7F );
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	b29b      	uxth	r3, r3
 800091a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800091e:	b29a      	uxth	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	801a      	strh	r2, [r3, #0]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	2000001c 	.word	0x2000001c

08000934 <USART1_IRQHandler>:
}


//ISR
void USART1_IRQHandler (void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

	Global_UART_Config->IRQ_HANDLER();
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <USART1_IRQHandler+0x10>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	4798      	blx	r3

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000001c 	.word	0x2000001c

08000948 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	Global_UART_Config->IRQ_HANDLER() ;
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <USART2_IRQHandler+0x10>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	4798      	blx	r3

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2000001c 	.word	0x2000001c

0800095c <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	Global_UART_Config->IRQ_HANDLER();
 8000960:	4b02      	ldr	r3, [pc, #8]	; (800096c <USART3_IRQHandler+0x10>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	4798      	blx	r3


}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000001c 	.word	0x2000001c

08000970 <clock_init>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
#define F_CPU 1000000UL

void clock_init()
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
	//Enable port A clock
	RCC_GPIOA_CLK_EN();
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <clock_init+0x24>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a06      	ldr	r2, [pc, #24]	; (8000994 <clock_init+0x24>)
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	6193      	str	r3, [r2, #24]
	//Enable AFIO clock
	RCC_AFIO_CLK_EN();
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <clock_init+0x24>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a03      	ldr	r2, [pc, #12]	; (8000994 <clock_init+0x24>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	6193      	str	r3, [r2, #24]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	40021000 	.word	0x40021000

08000998 <wait_ms>:
void wait_ms(uint32_t time){
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<time;i++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	e00b      	b.n	80009be <wait_ms+0x26>
		for(j=0;j<255;j++);
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	e002      	b.n	80009b2 <wait_ms+0x1a>
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	3301      	adds	r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	2bfe      	cmp	r3, #254	; 0xfe
 80009b6:	d9f9      	bls.n	80009ac <wait_ms+0x14>
	for(i=0;i<time;i++)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	3301      	adds	r3, #1
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d3ef      	bcc.n	80009a6 <wait_ms+0xe>
}
 80009c6:	bf00      	nop
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
	...

080009d4 <main>:


int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
	uint8_t data;
	clock_init();
 80009da:	f7ff ffc9 	bl	8000970 <clock_init>
	USART_CONFIG_t uartCFG;
	uartCFG.Baud_Rate = USART_BaudRate_9600;
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	703b      	strb	r3, [r7, #0]
	uartCFG.HW_FLW_CTRL = USART_HW_FLW_NONE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	71bb      	strb	r3, [r7, #6]
	uartCFG.IRQ_Enable = USART_IRQ_NONE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	717b      	strb	r3, [r7, #5]
	uartCFG.Parity = USART_Parity_NONE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	713b      	strb	r3, [r7, #4]
	uartCFG.Word_Length = USART_WordLength_8BIT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	70fb      	strb	r3, [r7, #3]
	uartCFG.Stop_Bits = USART_StopBits_1B;
 80009f2:	2300      	movs	r3, #0
 80009f4:	707b      	strb	r3, [r7, #1]
	uartCFG.USART_Mode = USART_Mode_Transmitter_Receiver;
 80009f6:	230c      	movs	r3, #12
 80009f8:	70bb      	strb	r3, [r7, #2]
	MCAL_USART_Init(USART1, &uartCFG);
 80009fa:	463b      	mov	r3, r7
 80009fc:	4619      	mov	r1, r3
 80009fe:	4822      	ldr	r0, [pc, #136]	; (8000a88 <main+0xb4>)
 8000a00:	f7ff fea6 	bl	8000750 <MCAL_USART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 8000a04:	4820      	ldr	r0, [pc, #128]	; (8000a88 <main+0xb4>)
 8000a06:	f7ff fe3d 	bl	8000684 <MCAL_UART_GPIO_Set_Pins>
	HAL_MOTORS_Init();
 8000a0a:	f7ff fbcf 	bl	80001ac <HAL_MOTORS_Init>
	forword();
 8000a0e:	f7ff fc1d 	bl	800024c <forword>
	while(1){
		MCAL_USART_Receive(USART1, &data, enable);
 8000a12:	f107 030f 	add.w	r3, r7, #15
 8000a16:	2200      	movs	r2, #0
 8000a18:	4619      	mov	r1, r3
 8000a1a:	481b      	ldr	r0, [pc, #108]	; (8000a88 <main+0xb4>)
 8000a1c:	f7ff ff5c 	bl	80008d8 <MCAL_USART_Receive>
		switch(data){
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	3b61      	subs	r3, #97	; 0x61
 8000a24:	2b03      	cmp	r3, #3
 8000a26:	d827      	bhi.n	8000a78 <main+0xa4>
 8000a28:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <main+0x5c>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a41 	.word	0x08000a41
 8000a34:	08000a4f 	.word	0x08000a4f
 8000a38:	08000a5d 	.word	0x08000a5d
 8000a3c:	08000a6b 	.word	0x08000a6b
				 case 'a':
					forword();
 8000a40:	f7ff fc04 	bl	800024c <forword>
					wait_ms(4000);
 8000a44:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a48:	f7ff ffa6 	bl	8000998 <wait_ms>
					break;
 8000a4c:	e014      	b.n	8000a78 <main+0xa4>
				  case 'b':
					  BACK();
 8000a4e:	f7ff fc17 	bl	8000280 <BACK>
						wait_ms(4000);
 8000a52:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a56:	f7ff ff9f 	bl	8000998 <wait_ms>
					  break;
 8000a5a:	e00d      	b.n	8000a78 <main+0xa4>
				   case 'c':
					 RIGHT();
 8000a5c:	f7ff fc2a 	bl	80002b4 <RIGHT>
						wait_ms(4000);
 8000a60:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a64:	f7ff ff98 	bl	8000998 <wait_ms>
				          break;
 8000a68:	e006      	b.n	8000a78 <main+0xa4>
				    case 'd':
					  LEFT();
 8000a6a:	f7ff fc43 	bl	80002f4 <LEFT>
						wait_ms(4000);
 8000a6e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000a72:	f7ff ff91 	bl	8000998 <wait_ms>
					  break;
 8000a76:	bf00      	nop


				}
				/* stop actions*/
				wait_ms(5000);
 8000a78:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a7c:	f7ff ff8c 	bl	8000998 <wait_ms>
				 STOP();
 8000a80:	f7ff fbca 	bl	8000218 <STOP>
		MCAL_USART_Receive(USART1, &data, enable);
 8000a84:	e7c5      	b.n	8000a12 <main+0x3e>
 8000a86:	bf00      	nop
 8000a88:	40013800 	.word	0x40013800

08000a8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a90:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a96:	490d      	ldr	r1, [pc, #52]	; (8000acc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <LoopForever+0xe>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aac:	4c0a      	ldr	r4, [pc, #40]	; (8000ad8 <LoopForever+0x16>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aba:	f000 f811 	bl	8000ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000abe:	f7ff ff89 	bl	80009d4 <main>

08000ac2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ac2:	e7fe      	b.n	8000ac2 <LoopForever>
  ldr   r0, =_estack
 8000ac4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ad0:	08000b60 	.word	0x08000b60
  ldr r2, =_sbss
 8000ad4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ad8:	20000020 	.word	0x20000020

08000adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_2_IRQHandler>
	...

08000ae0 <__libc_init_array>:
 8000ae0:	b570      	push	{r4, r5, r6, lr}
 8000ae2:	2600      	movs	r6, #0
 8000ae4:	4d0c      	ldr	r5, [pc, #48]	; (8000b18 <__libc_init_array+0x38>)
 8000ae6:	4c0d      	ldr	r4, [pc, #52]	; (8000b1c <__libc_init_array+0x3c>)
 8000ae8:	1b64      	subs	r4, r4, r5
 8000aea:	10a4      	asrs	r4, r4, #2
 8000aec:	42a6      	cmp	r6, r4
 8000aee:	d109      	bne.n	8000b04 <__libc_init_array+0x24>
 8000af0:	f000 f81a 	bl	8000b28 <_init>
 8000af4:	2600      	movs	r6, #0
 8000af6:	4d0a      	ldr	r5, [pc, #40]	; (8000b20 <__libc_init_array+0x40>)
 8000af8:	4c0a      	ldr	r4, [pc, #40]	; (8000b24 <__libc_init_array+0x44>)
 8000afa:	1b64      	subs	r4, r4, r5
 8000afc:	10a4      	asrs	r4, r4, #2
 8000afe:	42a6      	cmp	r6, r4
 8000b00:	d105      	bne.n	8000b0e <__libc_init_array+0x2e>
 8000b02:	bd70      	pop	{r4, r5, r6, pc}
 8000b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b08:	4798      	blx	r3
 8000b0a:	3601      	adds	r6, #1
 8000b0c:	e7ee      	b.n	8000aec <__libc_init_array+0xc>
 8000b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b12:	4798      	blx	r3
 8000b14:	3601      	adds	r6, #1
 8000b16:	e7f2      	b.n	8000afe <__libc_init_array+0x1e>
 8000b18:	08000b58 	.word	0x08000b58
 8000b1c:	08000b58 	.word	0x08000b58
 8000b20:	08000b58 	.word	0x08000b58
 8000b24:	08000b5c 	.word	0x08000b5c

08000b28 <_init>:
 8000b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b2a:	bf00      	nop
 8000b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b2e:	bc08      	pop	{r3}
 8000b30:	469e      	mov	lr, r3
 8000b32:	4770      	bx	lr

08000b34 <_fini>:
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b36:	bf00      	nop
 8000b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b3a:	bc08      	pop	{r3}
 8000b3c:	469e      	mov	lr, r3
 8000b3e:	4770      	bx	lr
