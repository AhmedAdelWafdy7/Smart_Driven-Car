
Smart_Driven_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bf4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000d24  08000d24  00010d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d3c  08000d3c  00010d44  2**0
                  CONTENTS
  4 .ARM          00000000  08000d3c  08000d3c  00010d44  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d3c  08000d44  00010d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d3c  08000d3c  00010d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d40  08000d40  00010d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  08000d44  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000d44  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010d44  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000117e  00000000  00000000  00010d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000662  00000000  00000000  00011eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00012550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  000126f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025c3  00000000  00000000  00012848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000026f3  00000000  00000000  00014e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008ee6  00000000  00000000  000174fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000203e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004ec  00000000  00000000  00020434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d0c 	.word	0x08000d0c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d0c 	.word	0x08000d0c

08000170 <wait_ms>:
 *      Author: Ahmed Adel Wafdy
 */

#include "MOTOR.h"

static void wait_ms(uint32_t time){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<time;i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <wait_ms+0x26>
		for(j=0;j<255;j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <wait_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <wait_ms+0x14>
	for(i=0;i<time;i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <wait_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <HAL_MOTORS_Init>:


void HAL_MOTORS_Init(void){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0

	GPIO_PIN_CONFIG_T pincfg;
	pincfg.GPIO_PIN_NUMBER = GPIO_PIN_0;
 80001b2:	2301      	movs	r3, #1
 80001b4:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001b6:	2304      	movs	r3, #4
 80001b8:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHz;
 80001ba:	2302      	movs	r3, #2
 80001bc:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &pincfg);
 80001be:	1d3b      	adds	r3, r7, #4
 80001c0:	4619      	mov	r1, r3
 80001c2:	4814      	ldr	r0, [pc, #80]	; (8000214 <HAL_MOTORS_Init+0x68>)
 80001c4:	f000 f954 	bl	8000470 <MCAL_GPIO_Init>

	pincfg.GPIO_PIN_NUMBER = GPIO_PIN_1;
 80001c8:	2302      	movs	r3, #2
 80001ca:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001cc:	2304      	movs	r3, #4
 80001ce:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHz;
 80001d0:	2302      	movs	r3, #2
 80001d2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &pincfg);
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	4619      	mov	r1, r3
 80001d8:	480e      	ldr	r0, [pc, #56]	; (8000214 <HAL_MOTORS_Init+0x68>)
 80001da:	f000 f949 	bl	8000470 <MCAL_GPIO_Init>

	pincfg.GPIO_PIN_NUMBER = GPIO_PIN_2;
 80001de:	2304      	movs	r3, #4
 80001e0:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001e2:	2304      	movs	r3, #4
 80001e4:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHz;
 80001e6:	2302      	movs	r3, #2
 80001e8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &pincfg);
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	4619      	mov	r1, r3
 80001ee:	4809      	ldr	r0, [pc, #36]	; (8000214 <HAL_MOTORS_Init+0x68>)
 80001f0:	f000 f93e 	bl	8000470 <MCAL_GPIO_Init>

	pincfg.GPIO_PIN_NUMBER = GPIO_PIN_3;
 80001f4:	2308      	movs	r3, #8
 80001f6:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001f8:	2304      	movs	r3, #4
 80001fa:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2MHz;
 80001fc:	2302      	movs	r3, #2
 80001fe:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &pincfg);
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	4619      	mov	r1, r3
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <HAL_MOTORS_Init+0x68>)
 8000206:	f000 f933 	bl	8000470 <MCAL_GPIO_Init>

}
 800020a:	bf00      	nop
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40010800 	.word	0x40010800

08000218 <forword>:
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_RESET);
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);

}

void forword(void){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
/*N1,N3 ARE  HIGH*/

	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	2101      	movs	r1, #1
 8000220:	4809      	ldr	r0, [pc, #36]	; (8000248 <forword+0x30>)
 8000222:	f000 f9a1 	bl	8000568 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	4807      	ldr	r0, [pc, #28]	; (8000248 <forword+0x30>)
 800022c:	f000 f99c 	bl	8000568 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	4804      	ldr	r0, [pc, #16]	; (8000248 <forword+0x30>)
 8000236:	f000 f997 	bl	8000568 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	4802      	ldr	r0, [pc, #8]	; (8000248 <forword+0x30>)
 8000240:	f000 f992 	bl	8000568 <MCAL_GPIO_WritePin>

}
 8000244:	bf00      	nop
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40010800 	.word	0x40010800

0800024c <BACK>:


void BACK(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0

	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	2101      	movs	r1, #1
 8000254:	4809      	ldr	r0, [pc, #36]	; (800027c <BACK+0x30>)
 8000256:	f000 f987 	bl	8000568 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 800025a:	2201      	movs	r2, #1
 800025c:	2102      	movs	r1, #2
 800025e:	4807      	ldr	r0, [pc, #28]	; (800027c <BACK+0x30>)
 8000260:	f000 f982 	bl	8000568 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2104      	movs	r1, #4
 8000268:	4804      	ldr	r0, [pc, #16]	; (800027c <BACK+0x30>)
 800026a:	f000 f97d 	bl	8000568 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);
 800026e:	2201      	movs	r2, #1
 8000270:	2108      	movs	r1, #8
 8000272:	4802      	ldr	r0, [pc, #8]	; (800027c <BACK+0x30>)
 8000274:	f000 f978 	bl	8000568 <MCAL_GPIO_WritePin>

}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40010800 	.word	0x40010800

08000280 <RIGHT>:


void RIGHT(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8000284:	2201      	movs	r2, #1
 8000286:	2101      	movs	r1, #1
 8000288:	480c      	ldr	r0, [pc, #48]	; (80002bc <RIGHT+0x3c>)
 800028a:	f000 f96d 	bl	8000568 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	2102      	movs	r1, #2
 8000292:	480a      	ldr	r0, [pc, #40]	; (80002bc <RIGHT+0x3c>)
 8000294:	f000 f968 	bl	8000568 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	2104      	movs	r1, #4
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <RIGHT+0x3c>)
 800029e:	f000 f963 	bl	8000568 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2108      	movs	r1, #8
 80002a6:	4805      	ldr	r0, [pc, #20]	; (80002bc <RIGHT+0x3c>)
 80002a8:	f000 f95e 	bl	8000568 <MCAL_GPIO_WritePin>
	 wait_ms(3000);
 80002ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80002b0:	f7ff ff5e 	bl	8000170 <wait_ms>
							 forword();
 80002b4:	f7ff ffb0 	bl	8000218 <forword>


}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40010800 	.word	0x40010800

080002c0 <LEFT>:
void LEFT(void){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2101      	movs	r1, #1
 80002c8:	480c      	ldr	r0, [pc, #48]	; (80002fc <LEFT+0x3c>)
 80002ca:	f000 f94d 	bl	8000568 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2102      	movs	r1, #2
 80002d2:	480a      	ldr	r0, [pc, #40]	; (80002fc <LEFT+0x3c>)
 80002d4:	f000 f948 	bl	8000568 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	2104      	movs	r1, #4
 80002dc:	4807      	ldr	r0, [pc, #28]	; (80002fc <LEFT+0x3c>)
 80002de:	f000 f943 	bl	8000568 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2108      	movs	r1, #8
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <LEFT+0x3c>)
 80002e8:	f000 f93e 	bl	8000568 <MCAL_GPIO_WritePin>

	 wait_ms(3000);
 80002ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80002f0:	f7ff ff3e 	bl	8000170 <wait_ms>
			 forword();
 80002f4:	f7ff ff90 	bl	8000218 <forword>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40010800 	.word	0x40010800

08000300 <Get_Bit_Location>:


#include "GPIO.h"


uint8_t Get_Bit_Location(uint16_t PinNumber){
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 800030a:	88fb      	ldrh	r3, [r7, #6]
 800030c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000310:	f000 80a5 	beq.w	800045e <Get_Bit_Location+0x15e>
 8000314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000318:	f300 80a3 	bgt.w	8000462 <Get_Bit_Location+0x162>
 800031c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000320:	f000 809b 	beq.w	800045a <Get_Bit_Location+0x15a>
 8000324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000328:	f300 809b 	bgt.w	8000462 <Get_Bit_Location+0x162>
 800032c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000330:	f000 8091 	beq.w	8000456 <Get_Bit_Location+0x156>
 8000334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000338:	f300 8093 	bgt.w	8000462 <Get_Bit_Location+0x162>
 800033c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000340:	f000 8087 	beq.w	8000452 <Get_Bit_Location+0x152>
 8000344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000348:	f300 808b 	bgt.w	8000462 <Get_Bit_Location+0x162>
 800034c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000350:	d07d      	beq.n	800044e <Get_Bit_Location+0x14e>
 8000352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000356:	f300 8084 	bgt.w	8000462 <Get_Bit_Location+0x162>
 800035a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800035e:	d074      	beq.n	800044a <Get_Bit_Location+0x14a>
 8000360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000364:	dc7d      	bgt.n	8000462 <Get_Bit_Location+0x162>
 8000366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800036a:	d06c      	beq.n	8000446 <Get_Bit_Location+0x146>
 800036c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000370:	dc77      	bgt.n	8000462 <Get_Bit_Location+0x162>
 8000372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000376:	d064      	beq.n	8000442 <Get_Bit_Location+0x142>
 8000378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800037c:	dc71      	bgt.n	8000462 <Get_Bit_Location+0x162>
 800037e:	2b80      	cmp	r3, #128	; 0x80
 8000380:	d05d      	beq.n	800043e <Get_Bit_Location+0x13e>
 8000382:	2b80      	cmp	r3, #128	; 0x80
 8000384:	dc6d      	bgt.n	8000462 <Get_Bit_Location+0x162>
 8000386:	2b20      	cmp	r3, #32
 8000388:	dc48      	bgt.n	800041c <Get_Bit_Location+0x11c>
 800038a:	2b00      	cmp	r3, #0
 800038c:	dd69      	ble.n	8000462 <Get_Bit_Location+0x162>
 800038e:	3b01      	subs	r3, #1
 8000390:	2b1f      	cmp	r3, #31
 8000392:	d866      	bhi.n	8000462 <Get_Bit_Location+0x162>
 8000394:	a201      	add	r2, pc, #4	; (adr r2, 800039c <Get_Bit_Location+0x9c>)
 8000396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039a:	bf00      	nop
 800039c:	08000423 	.word	0x08000423
 80003a0:	08000427 	.word	0x08000427
 80003a4:	08000463 	.word	0x08000463
 80003a8:	0800042b 	.word	0x0800042b
 80003ac:	08000463 	.word	0x08000463
 80003b0:	08000463 	.word	0x08000463
 80003b4:	08000463 	.word	0x08000463
 80003b8:	0800042f 	.word	0x0800042f
 80003bc:	08000463 	.word	0x08000463
 80003c0:	08000463 	.word	0x08000463
 80003c4:	08000463 	.word	0x08000463
 80003c8:	08000463 	.word	0x08000463
 80003cc:	08000463 	.word	0x08000463
 80003d0:	08000463 	.word	0x08000463
 80003d4:	08000463 	.word	0x08000463
 80003d8:	08000433 	.word	0x08000433
 80003dc:	08000463 	.word	0x08000463
 80003e0:	08000463 	.word	0x08000463
 80003e4:	08000463 	.word	0x08000463
 80003e8:	08000463 	.word	0x08000463
 80003ec:	08000463 	.word	0x08000463
 80003f0:	08000463 	.word	0x08000463
 80003f4:	08000463 	.word	0x08000463
 80003f8:	08000463 	.word	0x08000463
 80003fc:	08000463 	.word	0x08000463
 8000400:	08000463 	.word	0x08000463
 8000404:	08000463 	.word	0x08000463
 8000408:	08000463 	.word	0x08000463
 800040c:	08000463 	.word	0x08000463
 8000410:	08000463 	.word	0x08000463
 8000414:	08000463 	.word	0x08000463
 8000418:	08000437 	.word	0x08000437
 800041c:	2b40      	cmp	r3, #64	; 0x40
 800041e:	d00c      	beq.n	800043a <Get_Bit_Location+0x13a>
 8000420:	e01f      	b.n	8000462 <Get_Bit_Location+0x162>
		case GPIO_PIN_0:
			return 0;
 8000422:	2300      	movs	r3, #0
 8000424:	e01e      	b.n	8000464 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_1:
			return 4;
 8000426:	2304      	movs	r3, #4
 8000428:	e01c      	b.n	8000464 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_2:
			return 8;
 800042a:	2308      	movs	r3, #8
 800042c:	e01a      	b.n	8000464 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_3:
			return 12;
 800042e:	230c      	movs	r3, #12
 8000430:	e018      	b.n	8000464 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_4:
			return 16;
 8000432:	2310      	movs	r3, #16
 8000434:	e016      	b.n	8000464 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_5:
			return 20;
 8000436:	2314      	movs	r3, #20
 8000438:	e014      	b.n	8000464 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_6:
			return 24;
 800043a:	2318      	movs	r3, #24
 800043c:	e012      	b.n	8000464 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_7:
			return 28;
 800043e:	231c      	movs	r3, #28
 8000440:	e010      	b.n	8000464 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_8:
			return 0;
 8000442:	2300      	movs	r3, #0
 8000444:	e00e      	b.n	8000464 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_9:
			return 4;
 8000446:	2304      	movs	r3, #4
 8000448:	e00c      	b.n	8000464 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_10:
			return 8;
 800044a:	2308      	movs	r3, #8
 800044c:	e00a      	b.n	8000464 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_11:
			return 12;
 800044e:	230c      	movs	r3, #12
 8000450:	e008      	b.n	8000464 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_12:
			return 16;
 8000452:	2310      	movs	r3, #16
 8000454:	e006      	b.n	8000464 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_13:
			return 20;
 8000456:	2314      	movs	r3, #20
 8000458:	e004      	b.n	8000464 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_14:
			return 24;
 800045a:	2318      	movs	r3, #24
 800045c:	e002      	b.n	8000464 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_15:
			return 28;
 800045e:	231c      	movs	r3, #28
 8000460:	e000      	b.n	8000464 <Get_Bit_Location+0x164>
			break;
	}
	return 0;
 8000462:	2300      	movs	r3, #0
}
 8000464:	4618      	mov	r0, r3
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <MCAL_GPIO_Init>:
 * @param[in]	- GPIOx: Where x can be (A...E) to select the GPIO peripheral
 * @param[in]	- PinConfig: Pointer to GPIO_PIN_CONFIG_T structure that contains the configurations of GPIO pin
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_GPIO_Init(GPIO_t *GPIOx,GPIO_PIN_CONFIG_T *PinConfig){
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..E)
	//Port configuration register high (GPIOx_CRH) (x=A..E)
	volatile uint32_t *ConfiguredRegister = NULL;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_config = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	60bb      	str	r3, [r7, #8]
	if(PinConfig->GPIO_PIN_NUMBER < GPIO_PIN_8){
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	881b      	ldrh	r3, [r3, #0]
 8000486:	2bff      	cmp	r3, #255	; 0xff
 8000488:	d802      	bhi.n	8000490 <MCAL_GPIO_Init+0x20>
		ConfiguredRegister = &(GPIOx->CRL);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	e002      	b.n	8000496 <MCAL_GPIO_Init+0x26>
	}
	else{
		ConfiguredRegister = &(GPIOx->CRH);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3304      	adds	r3, #4
 8000494:	60fb      	str	r3, [r7, #12]
	}
	// We should clear registers CNFy[1:0]: Port x configuration bits (y= 0 .. 7), MODEy[1:0]: Port x mode bits (y= 0 .. 7)
	(*ConfiguredRegister) &= ~(0xf << (Get_Bit_Location(PinConfig->GPIO_PIN_NUMBER)));
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	881b      	ldrh	r3, [r3, #0]
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ff30 	bl	8000300 <Get_Bit_Location>
 80004a0:	4603      	mov	r3, r0
 80004a2:	461a      	mov	r2, r3
 80004a4:	230f      	movs	r3, #15
 80004a6:	4093      	lsls	r3, r2
 80004a8:	43da      	mvns	r2, r3
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	401a      	ands	r2, r3
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	601a      	str	r2, [r3, #0]
	// if GPIO ====>Output
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP))
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	789b      	ldrb	r3, [r3, #2]
 80004b8:	2b05      	cmp	r3, #5
 80004ba:	d00b      	beq.n	80004d4 <MCAL_GPIO_Init+0x64>
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	789b      	ldrb	r3, [r3, #2]
 80004c0:	2b04      	cmp	r3, #4
 80004c2:	d007      	beq.n	80004d4 <MCAL_GPIO_Init+0x64>
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	789b      	ldrb	r3, [r3, #2]
 80004c8:	2b07      	cmp	r3, #7
 80004ca:	d003      	beq.n	80004d4 <MCAL_GPIO_Init+0x64>
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	789b      	ldrb	r3, [r3, #2]
 80004d0:	2b06      	cmp	r3, #6
 80004d2:	d10a      	bne.n	80004ea <MCAL_GPIO_Init+0x7a>
	{
		//set CNFy[1:0],MODEy[1:0]
		pin_config = ( ( (PinConfig->GPIO_MODE-4) << 2 ) | (PinConfig->GPIO_OUTPUT_SPEED) ) &0x0f ;
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	789b      	ldrb	r3, [r3, #2]
 80004d8:	3b04      	subs	r3, #4
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	683a      	ldr	r2, [r7, #0]
 80004de:	78d2      	ldrb	r2, [r2, #3]
 80004e0:	4313      	orrs	r3, r2
 80004e2:	f003 030f 	and.w	r3, r3, #15
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	e02b      	b.n	8000542 <MCAL_GPIO_Init+0xd2>
	}
	// if GPIO ====>Input 00: Input mode (reset state)
	else{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog)){
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	789b      	ldrb	r3, [r3, #2]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d003      	beq.n	80004fa <MCAL_GPIO_Init+0x8a>
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	789b      	ldrb	r3, [r3, #2]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d106      	bne.n	8000508 <MCAL_GPIO_Init+0x98>
			//set CNFy[1:0],MODEy[1:0]
			pin_config = (( ( (PinConfig->GPIO_MODE) << 2 ) | 0x0) &0x0f);
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	789b      	ldrb	r3, [r3, #2]
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	f003 030f 	and.w	r3, r3, #15
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	e01c      	b.n	8000542 <MCAL_GPIO_Init+0xd2>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT){
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	789b      	ldrb	r3, [r3, #2]
 800050c:	2b08      	cmp	r3, #8
 800050e:	d102      	bne.n	8000516 <MCAL_GPIO_Init+0xa6>
			//set CNFy[1:0],MODEy[1:0]
			pin_config = (( ( GPIO_MODE_INPUT_FLO << 2 ) | 0x0) &0x0f);
 8000510:	2304      	movs	r3, #4
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	e015      	b.n	8000542 <MCAL_GPIO_Init+0xd2>
		}
		//Input with pull-up / pull-down
		else{
			pin_config = (( ( GPIO_MODE_INPUT_PU << 2 ) | 0x0) &0x0f);
 8000516:	2308      	movs	r3, #8
 8000518:	60bb      	str	r3, [r7, #8]
			if(PinConfig->GPIO_MODE ==  GPIO_MODE_INPUT_PU){
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	789b      	ldrb	r3, [r3, #2]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d107      	bne.n	8000532 <MCAL_GPIO_Init+0xc2>
				//PxODR register 1 Input pull-up
				GPIOx->ODR |= PinConfig->GPIO_PIN_NUMBER;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	68db      	ldr	r3, [r3, #12]
 8000526:	683a      	ldr	r2, [r7, #0]
 8000528:	8812      	ldrh	r2, [r2, #0]
 800052a:	431a      	orrs	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	e007      	b.n	8000542 <MCAL_GPIO_Init+0xd2>
			}
			else{
				//PxODR register 0 Input pull-down
				GPIOx->ODR &= ~(PinConfig->GPIO_PIN_NUMBER);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	683a      	ldr	r2, [r7, #0]
 8000538:	8812      	ldrh	r2, [r2, #0]
 800053a:	43d2      	mvns	r2, r2
 800053c:	401a      	ands	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Write on CNFy[1:0]: Port x configuration bits (y= 0 .. 7), MODEy[1:0]: Port x mode bits (y= 0 .. 7)
	(*ConfiguredRegister) |= (pin_config << (Get_Bit_Location(PinConfig->GPIO_PIN_NUMBER)));
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff feda 	bl	8000300 <Get_Bit_Location>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	fa03 f202 	lsl.w	r2, r3, r2
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	431a      	orrs	r2, r3
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	601a      	str	r2, [r3, #0]
}
 8000560:	bf00      	nop
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <MCAL_GPIO_WritePin>:
 * @param[in]	- PinNumber : set pin number according to @ref GPIO_PIN_NUMBER
 * @param[in]	- value: value which will be written on pin
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_GPIO_WritePin(GPIO_t *GPIOx,uint16_t PinNumber,uint8_t value){
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	807b      	strh	r3, [r7, #2]
 8000574:	4613      	mov	r3, r2
 8000576:	707b      	strb	r3, [r7, #1]
	if(value != GPIO_PIN_RESET){
 8000578:	787b      	ldrb	r3, [r7, #1]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d003      	beq.n	8000586 <MCAL_GPIO_WritePin+0x1e>
		//Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOx->BSRR = PinNumber;
 800057e:	887a      	ldrh	r2, [r7, #2]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	611a      	str	r2, [r3, #16]
0: No action on the corresponding ODRx bit
1: Reset the corresponding ODRx bit*/
		GPIOx->BRR =(uint32_t)PinNumber;

	}
}
 8000584:	e002      	b.n	800058c <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR =(uint32_t)PinNumber;
 8000586:	887a      	ldrh	r2, [r7, #2]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	615a      	str	r2, [r3, #20]
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
	...

08000598 <MCAL_RCC_GetSYS_CLKFreq>:
 * @brief		- After a system reset, the HSI oscillator is selected as system clock. When a clock source is
used directly or through the PLL as system clock, it is not possible to stop it.
 * @retval		- uint32_t : amount of Frequancy generated by system clock
 * Note			- none
 * */
uint32_t MCAL_RCC_GetSYS_CLKFreq(void){
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
Set and cleared by hardware to indicate which clock source is used as system clock.
00: HSI oscillator used as system clock
01: HSE oscillator used as system clock
10: PLL used as system clock
11: not applicable*/
	switch ((RCC->CFGR >> 2)&0b11){
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	089b      	lsrs	r3, r3, #2
 80005a2:	f003 0303 	and.w	r3, r3, #3
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d00a      	beq.n	80005c0 <MCAL_RCC_GetSYS_CLKFreq+0x28>
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d80a      	bhi.n	80005c4 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d002      	beq.n	80005bc <MCAL_RCC_GetSYS_CLKFreq+0x24>
 80005b6:	e005      	b.n	80005c4 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
		case 0:
			return HSI_RC_CLK;
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 80005ba:	e003      	b.n	80005c4 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;
		case 1:
			return HSE_CLK;
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 80005be:	e001      	b.n	80005c4 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;
		case 2:
			return 16000000;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 80005c2:	e7ff      	b.n	80005c4 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;
	}
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	40021000 	.word	0x40021000
 80005d0:	007a1200 	.word	0x007a1200
 80005d4:	00f42400 	.word	0x00f42400

080005d8 <MCAL_RCC_Get_HCLKFreq>:
 * @Fn			- MCAL_RCC_Get_HCLKFreq
 * @brief		- Get HCLK source and Compute PCLK1 frequency
 * @retval		- uint32_t ====>
 * Note			- none
 * */
uint32_t MCAL_RCC_Get_HCLKFreq(void){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetSYS_CLKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  );
 80005dc:	f7ff ffdc 	bl	8000598 <MCAL_RCC_GetSYS_CLKFreq>
 80005e0:	4602      	mov	r2, r0
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <MCAL_RCC_Get_HCLKFreq+0x20>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	091b      	lsrs	r3, r3, #4
 80005e8:	f003 030f 	and.w	r3, r3, #15
 80005ec:	4903      	ldr	r1, [pc, #12]	; (80005fc <MCAL_RCC_Get_HCLKFreq+0x24>)
 80005ee:	5ccb      	ldrb	r3, [r1, r3]
 80005f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40021000 	.word	0x40021000
 80005fc:	08000d2c 	.word	0x08000d2c

08000600 <MCAL_RCC_Get_PCLK1Freq>:
 * @Fn			- MCAL_RCC_Get_PCLK1Freq
 * @brief		- Get HCLK source and Compute PCLK1 frequency
 * @retval		- uint32_t ====> PCLK1 frequency
 * Note			- none
 * */
uint32_t MCAL_RCC_Get_PCLK1Freq(void){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	return (MCAL_RCC_Get_HCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  );
 8000604:	f7ff ffe8 	bl	80005d8 <MCAL_RCC_Get_HCLKFreq>
 8000608:	4602      	mov	r2, r0
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <MCAL_RCC_Get_PCLK1Freq+0x20>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	0a1b      	lsrs	r3, r3, #8
 8000610:	f003 0307 	and.w	r3, r3, #7
 8000614:	4903      	ldr	r1, [pc, #12]	; (8000624 <MCAL_RCC_Get_PCLK1Freq+0x24>)
 8000616:	5ccb      	ldrb	r3, [r1, r3]
 8000618:	fa22 f303 	lsr.w	r3, r2, r3

}
 800061c:	4618      	mov	r0, r3
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40021000 	.word	0x40021000
 8000624:	08000d24 	.word	0x08000d24

08000628 <MCAL_RCC_Get_PCLK2Freq>:
 * @Fn			- MCAL_RCC_GetSYS_PCLK2Freq
 * @brief		- Get HCLK source and Compute PCLK2 frequency
 * @retval		- uint32_t ====> PCLK1 frequency
 * Note			- none
 * */
uint32_t MCAL_RCC_Get_PCLK2Freq(void){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	return (MCAL_RCC_Get_HCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11 ) & 0b111) ]  );
 800062c:	f7ff ffd4 	bl	80005d8 <MCAL_RCC_Get_HCLKFreq>
 8000630:	4602      	mov	r2, r0
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <MCAL_RCC_Get_PCLK2Freq+0x20>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	0adb      	lsrs	r3, r3, #11
 8000638:	f003 0307 	and.w	r3, r3, #7
 800063c:	4903      	ldr	r1, [pc, #12]	; (800064c <MCAL_RCC_Get_PCLK2Freq+0x24>)
 800063e:	5ccb      	ldrb	r3, [r1, r3]
 8000640:	fa22 f303 	lsr.w	r3, r2, r3

}
 8000644:	4618      	mov	r0, r3
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000
 800064c:	08000d24 	.word	0x08000d24

08000650 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART configuration
 * @retval 			- none
 * Note				- support for now Asynchronous mode & clock 8 MHz
 */
void MCAL_UART_Init(USART_t* USARTx, USART_Config_t* UART_Config)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	uint32_t pclk, BRR;

	/* 1. Enable the clock for given USART peripheral */
	if(USARTx == USART1)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a59      	ldr	r2, [pc, #356]	; (80007c4 <MCAL_UART_Init+0x174>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d109      	bne.n	8000676 <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 8000662:	4b59      	ldr	r3, [pc, #356]	; (80007c8 <MCAL_UART_Init+0x178>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4a58      	ldr	r2, [pc, #352]	; (80007c8 <MCAL_UART_Init+0x178>)
 8000668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066c:	6193      	str	r3, [r2, #24]
		Global_USART_Config[0] = UART_Config;
 800066e:	4a57      	ldr	r2, [pc, #348]	; (80007cc <MCAL_UART_Init+0x17c>)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	e01a      	b.n	80006ac <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART2)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a55      	ldr	r2, [pc, #340]	; (80007d0 <MCAL_UART_Init+0x180>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d109      	bne.n	8000692 <MCAL_UART_Init+0x42>
	{
		RCC_USART2_CLK_EN();
 800067e:	4b52      	ldr	r3, [pc, #328]	; (80007c8 <MCAL_UART_Init+0x178>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a51      	ldr	r2, [pc, #324]	; (80007c8 <MCAL_UART_Init+0x178>)
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[1] = UART_Config;
 800068a:	4a50      	ldr	r2, [pc, #320]	; (80007cc <MCAL_UART_Init+0x17c>)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	6053      	str	r3, [r2, #4]
 8000690:	e00c      	b.n	80006ac <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART3)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a4f      	ldr	r2, [pc, #316]	; (80007d4 <MCAL_UART_Init+0x184>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d108      	bne.n	80006ac <MCAL_UART_Init+0x5c>
	{
		RCC_USART3_CLK_EN();
 800069a:	4b4b      	ldr	r3, [pc, #300]	; (80007c8 <MCAL_UART_Init+0x178>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a4a      	ldr	r2, [pc, #296]	; (80007c8 <MCAL_UART_Init+0x178>)
 80006a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006a4:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[2] = UART_Config;
 80006a6:	4a49      	ldr	r2, [pc, #292]	; (80007cc <MCAL_UART_Init+0x17c>)
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	6093      	str	r3, [r2, #8]
	}
	/* 2. Enable USART Module */
	USARTx->CR1 |= 1<<13;							// bit 13 UE: USART enable
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60da      	str	r2, [r3, #12]

	/* 3. Enable USART TX/RX engines according to the USART_Mode configuration item */
	USARTx->CR1 |= UART_Config->USART_Mode; 		// USART_CR1 bit 3 TE: transmitter enable & bit 2 RE: receiver enable
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	683a      	ldr	r2, [r7, #0]
 80006be:	8812      	ldrh	r2, [r2, #0]
 80006c0:	431a      	orrs	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	60da      	str	r2, [r3, #12]

	/* 4. Pay-load width */
	USARTx->CR1 |= UART_Config->Payload_Length;		// USARTx->CR1 bit 12 M: word length
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	683a      	ldr	r2, [r7, #0]
 80006cc:	8912      	ldrh	r2, [r2, #8]
 80006ce:	431a      	orrs	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	60da      	str	r2, [r3, #12]

	/* 5. configuration of parity control bit field */
	USARTx->CR1 |= UART_Config->Parity;				// USARTx->CR1 bit 10 PCE: Parity Control enable bit 9 PS: Parity selection
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	683a      	ldr	r2, [r7, #0]
 80006da:	8952      	ldrh	r2, [r2, #10]
 80006dc:	431a      	orrs	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	60da      	str	r2, [r3, #12]

	/* 6. configuration the no. of stop bits */
	USARTx->CR2 |= UART_Config->StopBits;			// USART_CR2 bits 13:12 STOP: stop bits
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	691b      	ldr	r3, [r3, #16]
 80006e6:	683a      	ldr	r2, [r7, #0]
 80006e8:	8992      	ldrh	r2, [r2, #12]
 80006ea:	431a      	orrs	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	611a      	str	r2, [r3, #16]


	/* 7. USART HW Flow Control */
	USARTx->CR3 |= UART_Config->HwFlowCtl;			// USART_CR3 bit 9 CTSE: CTS enable bit 8 RTSE: RTS enable
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	89d2      	ldrh	r2, [r2, #14]
 80006f8:	431a      	orrs	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	615a      	str	r2, [r3, #20]


	/* 8. configuration of BRR (baud-rate register) */
	if (USARTx == USART1)							// PCLK2 for USART1
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a30      	ldr	r2, [pc, #192]	; (80007c4 <MCAL_UART_Init+0x174>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d103      	bne.n	800070e <MCAL_UART_Init+0xbe>

	{
		pclk = MCAL_RCC_Get_PCLK2Freq();
 8000706:	f7ff ff8f 	bl	8000628 <MCAL_RCC_Get_PCLK2Freq>
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	e002      	b.n	8000714 <MCAL_UART_Init+0xc4>
	}
	else											// PCLK1 for USART2, 3

	{
		pclk = MCAL_RCC_Get_PCLK1Freq();
 800070e:	f7ff ff77 	bl	8000600 <MCAL_RCC_Get_PCLK1Freq>
 8000712:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	011b      	lsls	r3, r3, #4
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000720:	0119      	lsls	r1, r3, #4
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	4613      	mov	r3, r2
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4413      	add	r3, r2
 800072a:	009a      	lsls	r2, r3, #2
 800072c:	441a      	add	r2, r3
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	fbb2 f2f3 	udiv	r2, r2, r3
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	011b      	lsls	r3, r3, #4
 800073e:	68f8      	ldr	r0, [r7, #12]
 8000740:	fbb0 f3f3 	udiv	r3, r0, r3
 8000744:	2064      	movs	r0, #100	; 0x64
 8000746:	fb00 f303 	mul.w	r3, r0, r3
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	4a22      	ldr	r2, [pc, #136]	; (80007d8 <MCAL_UART_Init+0x188>)
 8000750:	fba2 2303 	umull	r2, r3, r2, r3
 8000754:	095b      	lsrs	r3, r3, #5
 8000756:	f003 030f 	and.w	r3, r3, #15
 800075a:	430b      	orrs	r3, r1
 800075c:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	68ba      	ldr	r2, [r7, #8]
 8000762:	609a      	str	r2, [r3, #8]

	/* 9. ENABLE / DISABLE Interrupt */
	if (UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	8a1b      	ldrh	r3, [r3, #16]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d026      	beq.n	80007ba <MCAL_UART_Init+0x16a>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	8a12      	ldrh	r2, [r2, #16]
 8000774:	431a      	orrs	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	60da      	str	r2, [r3, #12]

		/* Enable NVIC for USARTx IRQ */
		if (USARTx == USART1)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <MCAL_UART_Init+0x174>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d106      	bne.n	8000790 <MCAL_UART_Init+0x140>
			NVIC_IRQ37_USART1_EN();
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MCAL_UART_Init+0x18c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a15      	ldr	r2, [pc, #84]	; (80007dc <MCAL_UART_Init+0x18c>)
 8000788:	f043 0320 	orr.w	r3, r3, #32
 800078c:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_EN();

		else if (USARTx == USART3)
			NVIC_IRQ39_USART3_EN();
	}
}
 800078e:	e014      	b.n	80007ba <MCAL_UART_Init+0x16a>
		else if (USARTx == USART2)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <MCAL_UART_Init+0x180>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d106      	bne.n	80007a6 <MCAL_UART_Init+0x156>
			NVIC_IRQ38_USART2_EN();
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MCAL_UART_Init+0x18c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <MCAL_UART_Init+0x18c>)
 800079e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a2:	6013      	str	r3, [r2, #0]
}
 80007a4:	e009      	b.n	80007ba <MCAL_UART_Init+0x16a>
		else if (USARTx == USART3)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <MCAL_UART_Init+0x184>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d105      	bne.n	80007ba <MCAL_UART_Init+0x16a>
			NVIC_IRQ39_USART3_EN();
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MCAL_UART_Init+0x18c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <MCAL_UART_Init+0x18c>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6013      	str	r3, [r2, #0]
}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40013800 	.word	0x40013800
 80007c8:	40021000 	.word	0x40021000
 80007cc:	2000001c 	.word	0x2000001c
 80007d0:	40004400 	.word	0x40004400
 80007d4:	40004800 	.word	0x40004800
 80007d8:	51eb851f 	.word	0x51eb851f
 80007dc:	e000e104 	.word	0xe000e104

080007e0 <MCAL_UART_ReceiveData>:
	place. Configure the DMA register as explained in multibuffer communication. STEP 3
	5. Select the desired baud rate using the baud rate register USART_BRR
	6. Set the RE bit USART_CR1. This enables the receiver which begins searching for a start bit
 * */
void MCAL_UART_ReceiveData(USART_t* USARTx, uint16_t* pRxBuffer, enum Polling_mechanism PollingEn)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	4613      	mov	r3, r2
 80007ec:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until RXNE flag is set in the SR */
	if (PollingEn == USART_enable)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d106      	bne.n	8000802 <MCAL_UART_ReceiveData+0x22>
	{
		while (!(USARTx->SR & 1<<5));
 80007f4:	bf00      	nop
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f003 0320 	and.w	r3, r3, #32
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d0f9      	beq.n	80007f6 <MCAL_UART_ReceiveData+0x16>
	}

	/* 2. Check the USART_WordLength item for 9-bit or 8-bit in a frame */
	if (USARTx == USART1)
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	4a4d      	ldr	r2, [pc, #308]	; (800093c <MCAL_UART_ReceiveData+0x15c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d12e      	bne.n	8000868 <MCAL_UART_ReceiveData+0x88>
	{
		/* 9 Bits Data */
		if (Global_USART_Config[0]->Payload_Length == UART_Payload_Length_9B)
 800080a:	4b4d      	ldr	r3, [pc, #308]	; (8000940 <MCAL_UART_ReceiveData+0x160>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	891b      	ldrh	r3, [r3, #8]
 8000810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000814:	d112      	bne.n	800083c <MCAL_UART_ReceiveData+0x5c>
		{
			if (Global_USART_Config[0]->Parity == UART_Parity_NONE)
 8000816:	4b4a      	ldr	r3, [pc, #296]	; (8000940 <MCAL_UART_ReceiveData+0x160>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	895b      	ldrh	r3, [r3, #10]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d105      	bne.n	800082c <MCAL_UART_ReceiveData+0x4c>
			{
				/* All 9 bits are data */
				*pRxBuffer = USARTx->DR ;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	b29a      	uxth	r2, r3
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	801a      	strh	r2, [r3, #0]
				/* just least 7 bits are data */
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
			}
		}
	}
}
 800082a:	e082      	b.n	8000932 <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF ;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	b29b      	uxth	r3, r3
 8000832:	b2db      	uxtb	r3, r3
 8000834:	b29a      	uxth	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	801a      	strh	r2, [r3, #0]
}
 800083a:	e07a      	b.n	8000932 <MCAL_UART_ReceiveData+0x152>
			if (Global_USART_Config[0]->Parity == UART_Parity_NONE)
 800083c:	4b40      	ldr	r3, [pc, #256]	; (8000940 <MCAL_UART_ReceiveData+0x160>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	895b      	ldrh	r3, [r3, #10]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d107      	bne.n	8000856 <MCAL_UART_ReceiveData+0x76>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	b29b      	uxth	r3, r3
 800084c:	b2db      	uxtb	r3, r3
 800084e:	b29a      	uxth	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	801a      	strh	r2, [r3, #0]
}
 8000854:	e06d      	b.n	8000932 <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	b29b      	uxth	r3, r3
 800085c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000860:	b29a      	uxth	r2, r3
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	801a      	strh	r2, [r3, #0]
}
 8000866:	e064      	b.n	8000932 <MCAL_UART_ReceiveData+0x152>
	else if (USARTx == USART2)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	4a36      	ldr	r2, [pc, #216]	; (8000944 <MCAL_UART_ReceiveData+0x164>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d12e      	bne.n	80008ce <MCAL_UART_ReceiveData+0xee>
		if (Global_USART_Config[1]->Payload_Length == UART_Payload_Length_9B)
 8000870:	4b33      	ldr	r3, [pc, #204]	; (8000940 <MCAL_UART_ReceiveData+0x160>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	891b      	ldrh	r3, [r3, #8]
 8000876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800087a:	d112      	bne.n	80008a2 <MCAL_UART_ReceiveData+0xc2>
			if (Global_USART_Config[1]->Parity == UART_Parity_NONE)
 800087c:	4b30      	ldr	r3, [pc, #192]	; (8000940 <MCAL_UART_ReceiveData+0x160>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	895b      	ldrh	r3, [r3, #10]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d105      	bne.n	8000892 <MCAL_UART_ReceiveData+0xb2>
				*pRxBuffer = USARTx->DR ;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	b29a      	uxth	r2, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	801a      	strh	r2, [r3, #0]
}
 8000890:	e04f      	b.n	8000932 <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF ;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	b29b      	uxth	r3, r3
 8000898:	b2db      	uxtb	r3, r3
 800089a:	b29a      	uxth	r2, r3
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	801a      	strh	r2, [r3, #0]
}
 80008a0:	e047      	b.n	8000932 <MCAL_UART_ReceiveData+0x152>
			if (Global_USART_Config[1]->Parity == UART_Parity_NONE)
 80008a2:	4b27      	ldr	r3, [pc, #156]	; (8000940 <MCAL_UART_ReceiveData+0x160>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	895b      	ldrh	r3, [r3, #10]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d107      	bne.n	80008bc <MCAL_UART_ReceiveData+0xdc>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	801a      	strh	r2, [r3, #0]
}
 80008ba:	e03a      	b.n	8000932 <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	801a      	strh	r2, [r3, #0]
}
 80008cc:	e031      	b.n	8000932 <MCAL_UART_ReceiveData+0x152>
	else if (USARTx == USART3)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4a1d      	ldr	r2, [pc, #116]	; (8000948 <MCAL_UART_ReceiveData+0x168>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d12d      	bne.n	8000932 <MCAL_UART_ReceiveData+0x152>
		if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_9B)
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MCAL_UART_ReceiveData+0x160>)
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	891b      	ldrh	r3, [r3, #8]
 80008dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008e0:	d112      	bne.n	8000908 <MCAL_UART_ReceiveData+0x128>
			if (Global_USART_Config[2]->Parity == UART_Parity_NONE)
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MCAL_UART_ReceiveData+0x160>)
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	895b      	ldrh	r3, [r3, #10]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d105      	bne.n	80008f8 <MCAL_UART_ReceiveData+0x118>
				*pRxBuffer = USARTx->DR ;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	801a      	strh	r2, [r3, #0]
}
 80008f6:	e01c      	b.n	8000932 <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF ;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	b29a      	uxth	r2, r3
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	801a      	strh	r2, [r3, #0]
}
 8000906:	e014      	b.n	8000932 <MCAL_UART_ReceiveData+0x152>
			if (Global_USART_Config[2]->Parity == UART_Parity_NONE)
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <MCAL_UART_ReceiveData+0x160>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	895b      	ldrh	r3, [r3, #10]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d107      	bne.n	8000922 <MCAL_UART_ReceiveData+0x142>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	b29b      	uxth	r3, r3
 8000918:	b2db      	uxtb	r3, r3
 800091a:	b29a      	uxth	r2, r3
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	801a      	strh	r2, [r3, #0]
}
 8000920:	e007      	b.n	8000932 <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	b29b      	uxth	r3, r3
 8000928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800092c:	b29a      	uxth	r2, r3
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	801a      	strh	r2, [r3, #0]
}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	40013800 	.word	0x40013800
 8000940:	2000001c 	.word	0x2000001c
 8000944:	40004400 	.word	0x40004400
 8000948:	40004800 	.word	0x40004800

0800094c <MCAL_UART_GPIO_Set_Pins>:
 * @param[in]		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- None
 * @Notes			- Should enable the corresponding ALT & GPIO in RCC clock . Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins(USART_t* USARTx)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	GPIO_PIN_CONFIG_T Pin_Config;

	if (USARTx == USART1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a73      	ldr	r2, [pc, #460]	; (8000b24 <MCAL_UART_GPIO_Set_Pins+0x1d8>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d149      	bne.n	80009f0 <MCAL_UART_GPIO_Set_Pins+0xa4>
	{
		// PA9 Tx
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_9;
 800095c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000960:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000962:	2306      	movs	r3, #6
 8000964:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000966:	2301      	movs	r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	4619      	mov	r1, r3
 8000970:	486d      	ldr	r0, [pc, #436]	; (8000b28 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000972:	f7ff fd7d 	bl	8000470 <MCAL_GPIO_Init>

		// PA10 Rx
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_10;
 8000976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097a:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800097c:	2301      	movs	r3, #1
 800097e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	4619      	mov	r1, r3
 8000986:	4868      	ldr	r0, [pc, #416]	; (8000b28 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000988:	f7ff fd72 	bl	8000470 <MCAL_GPIO_Init>

		if (Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_CTS || Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 800098c:	4b67      	ldr	r3, [pc, #412]	; (8000b2c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	89db      	ldrh	r3, [r3, #14]
 8000992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000996:	d005      	beq.n	80009a4 <MCAL_UART_GPIO_Set_Pins+0x58>
 8000998:	4b64      	ldr	r3, [pc, #400]	; (8000b2c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	89db      	ldrh	r3, [r3, #14]
 800099e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80009a2:	d10a      	bne.n	80009ba <MCAL_UART_GPIO_Set_Pins+0x6e>
		{
			// PA11 CTS
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_11;
 80009a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009a8:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80009aa:	2301      	movs	r3, #1
 80009ac:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4619      	mov	r1, r3
 80009b4:	485c      	ldr	r0, [pc, #368]	; (8000b28 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 80009b6:	f7ff fd5b 	bl	8000470 <MCAL_GPIO_Init>
		}

		if (Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_RTS || Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 80009ba:	4b5c      	ldr	r3, [pc, #368]	; (8000b2c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	89db      	ldrh	r3, [r3, #14]
 80009c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009c4:	d006      	beq.n	80009d4 <MCAL_UART_GPIO_Set_Pins+0x88>
 80009c6:	4b59      	ldr	r3, [pc, #356]	; (8000b2c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	89db      	ldrh	r3, [r3, #14]
 80009cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80009d0:	f040 80a3 	bne.w	8000b1a <MCAL_UART_GPIO_Set_Pins+0x1ce>
		{
			// PA12 RTS
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_12;
 80009d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d8:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009da:	2306      	movs	r3, #6
 80009dc:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80009de:	2301      	movs	r3, #1
 80009e0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4619      	mov	r1, r3
 80009e8:	484f      	ldr	r0, [pc, #316]	; (8000b28 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 80009ea:	f7ff fd41 	bl	8000470 <MCAL_GPIO_Init>
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
		}
	}
}
 80009ee:	e094      	b.n	8000b1a <MCAL_UART_GPIO_Set_Pins+0x1ce>
	else if (USARTx == USART2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a4f      	ldr	r2, [pc, #316]	; (8000b30 <MCAL_UART_GPIO_Set_Pins+0x1e4>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d144      	bne.n	8000a82 <MCAL_UART_GPIO_Set_Pins+0x136>
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_2;
 80009f8:	2304      	movs	r3, #4
 80009fa:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009fc:	2306      	movs	r3, #6
 80009fe:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000a00:	2301      	movs	r3, #1
 8000a02:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4847      	ldr	r0, [pc, #284]	; (8000b28 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000a0c:	f7ff fd30 	bl	8000470 <MCAL_GPIO_Init>
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_3;
 8000a10:	2308      	movs	r3, #8
 8000a12:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a14:	2301      	movs	r3, #1
 8000a16:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4842      	ldr	r0, [pc, #264]	; (8000b28 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000a20:	f7ff fd26 	bl	8000470 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_CTS || Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8000a24:	4b41      	ldr	r3, [pc, #260]	; (8000b2c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	89db      	ldrh	r3, [r3, #14]
 8000a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a2e:	d005      	beq.n	8000a3c <MCAL_UART_GPIO_Set_Pins+0xf0>
 8000a30:	4b3e      	ldr	r3, [pc, #248]	; (8000b2c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	89db      	ldrh	r3, [r3, #14]
 8000a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000a3a:	d109      	bne.n	8000a50 <MCAL_UART_GPIO_Set_Pins+0x104>
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_0;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a40:	2301      	movs	r3, #1
 8000a42:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4837      	ldr	r0, [pc, #220]	; (8000b28 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000a4c:	f7ff fd10 	bl	8000470 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_RTS || Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8000a50:	4b36      	ldr	r3, [pc, #216]	; (8000b2c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	89db      	ldrh	r3, [r3, #14]
 8000a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a5a:	d005      	beq.n	8000a68 <MCAL_UART_GPIO_Set_Pins+0x11c>
 8000a5c:	4b33      	ldr	r3, [pc, #204]	; (8000b2c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	89db      	ldrh	r3, [r3, #14]
 8000a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000a66:	d158      	bne.n	8000b1a <MCAL_UART_GPIO_Set_Pins+0x1ce>
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_1;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a6c:	2306      	movs	r3, #6
 8000a6e:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000a70:	2301      	movs	r3, #1
 8000a72:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	4619      	mov	r1, r3
 8000a7a:	482b      	ldr	r0, [pc, #172]	; (8000b28 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000a7c:	f7ff fcf8 	bl	8000470 <MCAL_GPIO_Init>
}
 8000a80:	e04b      	b.n	8000b1a <MCAL_UART_GPIO_Set_Pins+0x1ce>
	else if (USARTx == USART3)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a2b      	ldr	r2, [pc, #172]	; (8000b34 <MCAL_UART_GPIO_Set_Pins+0x1e8>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d147      	bne.n	8000b1a <MCAL_UART_GPIO_Set_Pins+0x1ce>
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_10;
 8000a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8e:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a90:	2306      	movs	r3, #6
 8000a92:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000a94:	2301      	movs	r3, #1
 8000a96:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4826      	ldr	r0, [pc, #152]	; (8000b38 <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 8000aa0:	f7ff fce6 	bl	8000470 <MCAL_GPIO_Init>
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_11;
 8000aa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aa8:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4820      	ldr	r0, [pc, #128]	; (8000b38 <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 8000ab6:	f7ff fcdb 	bl	8000470 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_CTS || Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	89db      	ldrh	r3, [r3, #14]
 8000ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ac4:	d005      	beq.n	8000ad2 <MCAL_UART_GPIO_Set_Pins+0x186>
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	89db      	ldrh	r3, [r3, #14]
 8000acc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000ad0:	d10a      	bne.n	8000ae8 <MCAL_UART_GPIO_Set_Pins+0x19c>
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_13;
 8000ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad6:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4815      	ldr	r0, [pc, #84]	; (8000b38 <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 8000ae4:	f7ff fcc4 	bl	8000470 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_RTS || Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	89db      	ldrh	r3, [r3, #14]
 8000aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000af2:	d005      	beq.n	8000b00 <MCAL_UART_GPIO_Set_Pins+0x1b4>
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	89db      	ldrh	r3, [r3, #14]
 8000afa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000afe:	d10c      	bne.n	8000b1a <MCAL_UART_GPIO_Set_Pins+0x1ce>
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_14;
 8000b00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b04:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000b06:	2306      	movs	r3, #6
 8000b08:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4619      	mov	r1, r3
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 8000b16:	f7ff fcab 	bl	8000470 <MCAL_GPIO_Init>
}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40013800 	.word	0x40013800
 8000b28:	40010800 	.word	0x40010800
 8000b2c:	2000001c 	.word	0x2000001c
 8000b30:	40004400 	.word	0x40004400
 8000b34:	40004800 	.word	0x40004800
 8000b38:	40010c00 	.word	0x40010c00

08000b3c <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <USART1_IRQHandler+0x10>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	4798      	blx	r3
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	2000001c 	.word	0x2000001c

08000b50 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 8000b54:	4b02      	ldr	r3, [pc, #8]	; (8000b60 <USART2_IRQHandler+0x10>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4798      	blx	r3
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2000001c 	.word	0x2000001c

08000b64 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <USART3_IRQHandler+0x10>)
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	4798      	blx	r3
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	2000001c 	.word	0x2000001c

08000b78 <clock_init>:
#endif
#define F_CPU 1000000UL
	uint8_t data;

void clock_init()
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
	//Enable port A clock
	RCC_GPIOA_CLK_EN();
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <clock_init+0x24>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <clock_init+0x24>)
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	6193      	str	r3, [r2, #24]
	//Enable AFIO clock
	RCC_AFIO_CLK_EN();
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <clock_init+0x24>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a03      	ldr	r2, [pc, #12]	; (8000b9c <clock_init+0x24>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6193      	str	r3, [r2, #24]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <USART1_CallBack>:
	uint32_t i,j;
	for(i=0;i<time;i++)
		for(j=0;j<255;j++);
}
void USART1_CallBack(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0

	switch(data){
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <USART1_CallBack+0x74>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	3b42      	subs	r3, #66	; 0x42
 8000baa:	2b10      	cmp	r3, #16
 8000bac:	d830      	bhi.n	8000c10 <USART1_CallBack+0x70>
 8000bae:	a201      	add	r2, pc, #4	; (adr r2, 8000bb4 <USART1_CallBack+0x14>)
 8000bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb4:	08000bff 	.word	0x08000bff
 8000bb8:	08000c11 	.word	0x08000c11
 8000bbc:	08000c11 	.word	0x08000c11
 8000bc0:	08000c11 	.word	0x08000c11
 8000bc4:	08000bf9 	.word	0x08000bf9
 8000bc8:	08000c11 	.word	0x08000c11
 8000bcc:	08000c11 	.word	0x08000c11
 8000bd0:	08000c11 	.word	0x08000c11
 8000bd4:	08000c11 	.word	0x08000c11
 8000bd8:	08000c11 	.word	0x08000c11
 8000bdc:	08000c0b 	.word	0x08000c0b
 8000be0:	08000c11 	.word	0x08000c11
 8000be4:	08000c11 	.word	0x08000c11
 8000be8:	08000c11 	.word	0x08000c11
 8000bec:	08000c11 	.word	0x08000c11
 8000bf0:	08000c11 	.word	0x08000c11
 8000bf4:	08000c05 	.word	0x08000c05
			 case 'F':
				forword();
 8000bf8:	f7ff fb0e 	bl	8000218 <forword>
				break;
 8000bfc:	e008      	b.n	8000c10 <USART1_CallBack+0x70>
			  case 'B':
				  BACK();
 8000bfe:	f7ff fb25 	bl	800024c <BACK>
				  break;
 8000c02:	e005      	b.n	8000c10 <USART1_CallBack+0x70>
			   case 'R':
				 RIGHT();
 8000c04:	f7ff fb3c 	bl	8000280 <RIGHT>
			      break;
 8000c08:	e002      	b.n	8000c10 <USART1_CallBack+0x70>
			    case 'L':
				  LEFT();
 8000c0a:	f7ff fb59 	bl	80002c0 <LEFT>
				  break;
 8000c0e:	bf00      	nop

			}

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000028 	.word	0x20000028

08000c18 <main>:

int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
	clock_init();
 8000c1e:	f7ff ffab 	bl	8000b78 <clock_init>
	HAL_MOTORS_Init();
 8000c22:	f7ff fac3 	bl	80001ac <HAL_MOTORS_Init>


	USART_Config_t USART1_Config;

	USART1_Config.BaudRate = UART_BaudRate_9600;
 8000c26:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000c2a:	607b      	str	r3, [r7, #4]
	USART1_Config.HwFlowCtl = UART_HwFlowCtl_NONE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	81fb      	strh	r3, [r7, #14]
	USART1_Config.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 8000c30:	2320      	movs	r3, #32
 8000c32:	823b      	strh	r3, [r7, #16]
	USART1_Config.P_IRQ_CallBack = USART1_CallBack;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <main+0x4c>)
 8000c36:	617b      	str	r3, [r7, #20]
	USART1_Config.Parity = UART_Parity_NONE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	817b      	strh	r3, [r7, #10]
	USART1_Config.Payload_Length = UART_Payload_Length_8B;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	813b      	strh	r3, [r7, #8]
	USART1_Config.StopBits = UART_StopBits_1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	81bb      	strh	r3, [r7, #12]
	USART1_Config.USART_Mode = UART_Mode_TX_RX;
 8000c44:	230c      	movs	r3, #12
 8000c46:	803b      	strh	r3, [r7, #0]
	MCAL_UART_Init(USART1, &USART1_Config);
 8000c48:	463b      	mov	r3, r7
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4806      	ldr	r0, [pc, #24]	; (8000c68 <main+0x50>)
 8000c4e:	f7ff fcff 	bl	8000650 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <main+0x50>)
 8000c54:	f7ff fe7a 	bl	800094c <MCAL_UART_GPIO_Set_Pins>


	while(1){
		MCAL_UART_ReceiveData(USART1,& data, USART_disable);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	4904      	ldr	r1, [pc, #16]	; (8000c6c <main+0x54>)
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <main+0x50>)
 8000c5e:	f7ff fdbf 	bl	80007e0 <MCAL_UART_ReceiveData>
 8000c62:	e7f9      	b.n	8000c58 <main+0x40>
 8000c64:	08000ba1 	.word	0x08000ba1
 8000c68:	40013800 	.word	0x40013800
 8000c6c:	20000028 	.word	0x20000028

08000c70 <Reset_Handler>:
 8000c70:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <LoopForever+0x2>)
 8000c72:	4685      	mov	sp, r0
 8000c74:	f3af 8000 	nop.w
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <LoopForever+0x6>)
 8000c7a:	490d      	ldr	r1, [pc, #52]	; (8000cb0 <LoopForever+0xa>)
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <LoopForever+0xe>)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:
 8000c82:	58d4      	ldr	r4, [r2, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:
 8000c88:	18c4      	adds	r4, r0, r3
 8000c8a:	428c      	cmp	r4, r1
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <LoopForever+0x12>)
 8000c90:	4c0a      	ldr	r4, [pc, #40]	; (8000cbc <LoopForever+0x16>)
 8000c92:	2300      	movs	r3, #0
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:
 8000c9a:	42a2      	cmp	r2, r4
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>
 8000c9e:	f000 f811 	bl	8000cc4 <__libc_init_array>
 8000ca2:	f7ff ffb9 	bl	8000c18 <main>

08000ca6 <LoopForever>:
 8000ca6:	e7fe      	b.n	8000ca6 <LoopForever>
 8000ca8:	20002800 	.word	0x20002800
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	08000d44 	.word	0x08000d44
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	2000002c 	.word	0x2000002c

08000cc0 <ADC1_2_IRQHandler>:
 8000cc0:	e7fe      	b.n	8000cc0 <ADC1_2_IRQHandler>
	...

08000cc4 <__libc_init_array>:
 8000cc4:	b570      	push	{r4, r5, r6, lr}
 8000cc6:	2600      	movs	r6, #0
 8000cc8:	4d0c      	ldr	r5, [pc, #48]	; (8000cfc <__libc_init_array+0x38>)
 8000cca:	4c0d      	ldr	r4, [pc, #52]	; (8000d00 <__libc_init_array+0x3c>)
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	10a4      	asrs	r4, r4, #2
 8000cd0:	42a6      	cmp	r6, r4
 8000cd2:	d109      	bne.n	8000ce8 <__libc_init_array+0x24>
 8000cd4:	f000 f81a 	bl	8000d0c <_init>
 8000cd8:	2600      	movs	r6, #0
 8000cda:	4d0a      	ldr	r5, [pc, #40]	; (8000d04 <__libc_init_array+0x40>)
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	; (8000d08 <__libc_init_array+0x44>)
 8000cde:	1b64      	subs	r4, r4, r5
 8000ce0:	10a4      	asrs	r4, r4, #2
 8000ce2:	42a6      	cmp	r6, r4
 8000ce4:	d105      	bne.n	8000cf2 <__libc_init_array+0x2e>
 8000ce6:	bd70      	pop	{r4, r5, r6, pc}
 8000ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cec:	4798      	blx	r3
 8000cee:	3601      	adds	r6, #1
 8000cf0:	e7ee      	b.n	8000cd0 <__libc_init_array+0xc>
 8000cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cf6:	4798      	blx	r3
 8000cf8:	3601      	adds	r6, #1
 8000cfa:	e7f2      	b.n	8000ce2 <__libc_init_array+0x1e>
 8000cfc:	08000d3c 	.word	0x08000d3c
 8000d00:	08000d3c 	.word	0x08000d3c
 8000d04:	08000d3c 	.word	0x08000d3c
 8000d08:	08000d40 	.word	0x08000d40

08000d0c <_init>:
 8000d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0e:	bf00      	nop
 8000d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d12:	bc08      	pop	{r3}
 8000d14:	469e      	mov	lr, r3
 8000d16:	4770      	bx	lr

08000d18 <_fini>:
 8000d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d1a:	bf00      	nop
 8000d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d1e:	bc08      	pop	{r3}
 8000d20:	469e      	mov	lr, r3
 8000d22:	4770      	bx	lr
